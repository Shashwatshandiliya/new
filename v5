// Updated EntitlementUserView.tsx
import * as React from "react";
import axios from "axios";
import Grid from "@mui/material/Grid";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import MaterialTable from "../../../Root/components/MaterialTable";
import {
  InputAdornment,
  TextField,
  Typography,
  CircularProgress,
  Divider,
  MenuItem,
  Select,
  FormControl,
  SelectChangeEvent,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Autocomplete // Add this import
} from "@mui/material";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import SearchIcon from "@mui/icons-material/Search";
import { Tabs } from "antd";
import Drawer from "@mui/material/Drawer";
import styles from "./EntitlementUserView.module.css";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";

const { TabPane } = Tabs;

interface AccountRow {
  accountOwner: string;
  accountName: string;
  accountType: string;
  accessRoles: { roleName: string }[];
  accountStatus: string;
}

interface EntitlementRow {
  entitlementName: string;
  entitlementDescription: string;
  entitlementOwner: string;
  isPrivileged: string;
}

export default function EntitlementUserView({
  onNavigate,
  onEditAccount,
}: {
  onNavigate?: (tab: string) => void;
  onEditAccount?: (id: string) => void;
}) {
  const [activeTab, setActiveTab] = React.useState<"1" | "2">("1");
  const [drawerOpen, setDrawerOpen] = React.useState(false);
  const [drawerData, setDrawerData] = React.useState<any>(null);
  const [searchTerm, setSearchTerm] = React.useState("");
  const [selectedApp, setSelectedApp] = React.useState("SAIL");
  const [appList, setAppList] = React.useState<string[]>([]);
  const [accounts, setAccounts] = React.useState<AccountRow[]>([]);
  const [entitlements, setEntitlements] = React.useState<EntitlementRow[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState("");
  const [confirmDeleteOpen, setConfirmDeleteOpen] = React.useState(false);

  const loadAppList = async () => {
    try {
      const { data } = await axios.get("https://uklvauems02a.uk.standardchartered.com:32442/fmces/v1/application/all");
      setAppList(data.map((app: any) => app.appName));
    } catch {
      setAppList(["SAIL"]);
    }
  };

  const loadAllAccounts = async () => {
    setError("");
    try {
      setLoading(true);
      const { data } = await axios.get("https://uklvauems02a.uk.standardchartered.com:32447/restService/onecert/v1/account", {
        headers: { applicationName: selectedApp },
      });
      setAccounts(data.accounts || []);
    } catch {
      setError("Failed to load accounts");
    } finally {
      setLoading(false);
    }
  };

  const loadAllEntitlements = async () => {
    setError("");
    try {
      setLoading(true);
      const { data } = await axios.get("https://uklvauems02a.uk.standardchartered.com:32447/restService/onecert/v1/entitlement", {
        headers: { applicationName: selectedApp },
      });
      setEntitlements(data.entitlements || []);
    } catch {
      setError("Failed to load entitlements");
    } finally {
      setLoading(false);
    }
  };

  React.useEffect(() => {
    loadAppList();
  }, []);

  React.useEffect(() => {
    if (activeTab === "1") loadAllAccounts();
    else loadAllEntitlements();
  }, [activeTab, selectedApp]);

  const handleSearch = async () => {
    setError("");
    if (!searchTerm) {
      activeTab === "1" ? loadAllAccounts() : loadAllEntitlements();
      return;
    }
    
    try {
      setLoading(true);
      if (activeTab === "1") {
        const { data } = await axios.get(
          `https://uklvauems02a.uk.standardchartered.com:32447/restService/onecert/v1/account/${encodeURIComponent(searchTerm)}`,
          { headers: { applicationName: selectedApp } }
        );
        setAccounts(data ? [data] : []);
      } else {
        const { data } = await axios.get(
          `https://uklvauems02a.uk.standardchartered.com:32447/restService/onecert/v1/entitlement/${encodeURIComponent(searchTerm)}`,
          { headers: { applicationName: selectedApp } }
        );
        setEntitlements(data ? [data] : []);
      }
    } catch {
      setError("No results found");
    } finally {
      setLoading(false);
    }
  };

  const openDrawer = (row: any) => {
    setDrawerData(row);
    setDrawerOpen(true);
  };

  const deleteAccount = async (accountName: string) => {
    try {
      await axios.delete(
        `https://uklvauems02a.uk.standardchartered.com:32447/restService/onecert/v1/deleteAccount/${encodeURIComponent(accountName)}`,
        { 
          headers: { applicationName: selectedApp },
         }  
      );
      loadAllAccounts();
      setDrawerOpen(false);
    }
    catch (err) {
      console.error("Failed to delete account", err);
      setError("Failed to delete account");
    } finally {
      setConfirmDeleteOpen(false);
    }   
  };

  return (
    <div className={styles.container}>
      <Typography fontFamily="Poppins" sx={{ fontWeight: 500, fontSize: 20, color: "white", mb: 2 }}>
        Entitlement Users
      </Typography>

      <Box display="flex" alignItems="center" gap={2} flexWrap="wrap" mb={2}>
        <Autocomplete
          freeSolo
          size="small"
          options={appList}
          value={selectedApp}
          onChange={(_e, newValue) => setSelectedApp(newValue || "")}
          inputValue={selectedApp}
          onInputChange={(_e, newInputValue) => setSelectedApp(newInputValue)}
          renderInput={(params) => (
            <TextField
              {...params}
              placeholder="Select application"
              sx={{ backgroundColor: "#1E252D", color: "white" }}
            />
          )}
          sx={{ minWidth: 200 }}
        />

        <Box display="flex" gap={1} alignItems="center">
          <TextField
            placeholder={activeTab === "1" ? "Search by owner/name" : "Search entitlement name"}
            size="small"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon sx={{ color: "#CBCBCB" }} />
                </InputAdornment>
              ),
              sx: { backgroundColor: "#1E252D", color: "white", borderRadius: 1 },
            }}
          />
          <Button
            variant="contained"
            size="small"
            onClick={handleSearch}
            sx={{ height: 36, textTransform: "none" }}
          >
            Search
          </Button>
        </Box>

        <Button
          variant="contained"
          startIcon={<AddCircleIcon />}
          onClick={() => onNavigate?.("create-account")}
          sx={{ height: 36, fontWeight: 600, fontSize: 12 }}
        >
          Create Account
        </Button>
      </Box>

      <Tabs
        activeKey={activeTab}
        onChange={(k) => {
          setActiveTab(k as "1" | "2");
          setSearchTerm("");
          setDrawerOpen(false);
          setDrawerData(null); // Reset drawer data
        }}
        className={styles.tabs}
      >
        <TabPane tab={<span style={{ fontWeight: 600, color: activeTab === "1" ? "#007BFF" : "#8D8D8D" }}>Accounts</span>} key="1" />
        <TabPane tab={<span style={{ fontWeight: 600, color: activeTab === "2" ? "#007BFF" : "#8D8D8D" }}>Entitlements</span>} key="2" />
      </Tabs>

      <Box className={styles.tableSection}>
        {loading ? (
          <Box sx={{ textAlign: "center", p: 4 }}>
            <CircularProgress sx={{ color: "white" }} />
          </Box>
        ) : error ? (
          <Typography sx={{ color: "red", textAlign: "center" }}>{error}</Typography>
        ) : (
          <Box sx={{ border: "1px solid #444", p: 2, borderRadius: 1, bgcolor: "#1A2028", mt: 2 }}>
            <MaterialTable
              tableRows={activeTab === "1" ? accounts : entitlements}
              tableCols={activeTab === "1" ? [
                { accessorKey: "accountOwner", header: "Account Owner" },
                { accessorKey: "accountName", header: "Account Name" },
                {
                  accessorKey: "accessRoles",
                  header: "Roles",
                  Cell: ({ cell }: any) => {
                    const roles = cell.getValue() || [];
                    return roles.map((r: any) => r.roleName).join(", ") || '-';
                  },
                },
                {
                  accessorKey: "accountStatus",
                  header: "Status",
                  Cell: ({ cell }: any) => {
                    const v = (cell.getValue() as string).toLowerCase();
                    const active = v === "active";
                    return (
                      <span
                        style={{
                          backgroundColor: active ? "#2BCBC11A" : "#ff00001A",
                          color: active ? "#2BCBC1" : "#ff0000",
                          padding: "0.25rem 0.5rem",
                          borderRadius: "20px",
                        }}
                      >
                        {active ? "Enabled" : "Inactive"}
                      </span>
                    );
                  },
                },
                { accessorKey: "accountType", header: "Account Type" },
              ] : [
                { accessorKey: "entitlementName", header: "Name" },
                { accessorKey: "entitlementDescription", header: "Description" },
                { accessorKey: "entitlementOwner", header: "Owner" },
                { accessorKey: "isPrivileged", header: "Privileged" },
              ]}
              globalSearch={false}
              onRowClick={(r) => openDrawer(r as any)}
            />
          </Box>
        )}
      </Box>

      <Drawer
        anchor="right"
        open={drawerOpen}
        onClose={() => {
          setDrawerOpen(false);
          setDrawerData(null); // Reset drawer data
        }}
        sx={{ "& .MuiDrawer-paper": { width: 420, bgcolor: "#1A2028", p: 3, borderLeft: "1px solid #2F3A45" } }}
      >
        {drawerData && (
          <>
            <Typography variant="h6" sx={{ color: "white", fontWeight: 600, mb: 1 }}>
              {drawerData.accountName || drawerData.entitlementName}
            </Typography>
            <Divider sx={{ bgcolor: "#2F3A45", mb: 2 }} />

            <Box sx={{ bgcolor: "#1E252D", p: 2, borderRadius: 1 }}>
              {activeTab === "1" ? (
                <>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Owner</Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>{drawerData.accountOwner}</Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Roles</Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>
                    {(drawerData.accessRoles || []).map((r: any) => r.roleName).join(", ") || '-'}
                  </Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Status</Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>{drawerData.accountStatus}</Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Type</Typography>
                  <Typography sx={{ color: "white" }}>{drawerData.accountType}</Typography>
                </>
              ) : (
                <>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Description</Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>{drawerData.entitlementDescription}</Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Owner</Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>{drawerData.entitlementOwner}</Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Privileged</Typography>
                  <Typography sx={{ color: "white" }}>{drawerData.isPrivileged}</Typography>
                </>
              )}
            </Box>

            {activeTab === "1" && (
              <Box sx={{ mt: 2, display: "flex", justifyContent: "flex-end", gap: 1 }}>
                <Button
                  variant="outlined"
                  startIcon={<DeleteIcon />}
                  sx={{ color: "white", borderColor: "white", textTransform: "none" }}
                  onClick={() => setConfirmDeleteOpen(true)}
                >
                  Delete
                </Button>
                <Button
                  variant="contained"
                  startIcon={<EditIcon />}
                  sx={{ textTransform: "none" }}
                  onClick={() => onEditAccount?.(drawerData.accountOwner)}
                >
                  Edit
                </Button>
              </Box>
            )}
          </>
        )}
      </Drawer>

      <Dialog
        open={confirmDeleteOpen}
        onClose={() => setConfirmDeleteOpen(false)}
      >
        <DialogTitle>Confirm Deletion</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to delete account "{drawerData?.accountName}"?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfirmDeleteOpen(false)} color="primary">
            Cancel
          </Button>
          <Button onClick={() => deleteAccount(drawerData?.accountName)} color="error">
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
}
