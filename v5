import React, { useState } from "react";
import {
  Box,
  Button,
  Grid,
  IconButton,
  TextField,
  Typography,
  Snackbar,
  Alert,
} from "@mui/material";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import styles from "./CreateEntitlementUser.module.css"; // reuse same styling

interface CreateEntitlementEntitlementUserProps {
  onBack: () => void;
}

export default function CreateEntitlementEntitlementUser({
  onBack,
}: CreateEntitlementEntitlementUserProps) {
  const [entitlementName, setEntitlementName] = useState("");
  const [description, setDescription] = useState("");
  const [application, setApplication] = useState("");

  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [snackbarSeverity, setSnackbarSeverity] = useState<"success" | "error">("success");

  const handleSubmit = () => {
    if (!entitlementName || !description || !application) {
      setSnackbarMessage("All fields are mandatory.");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
      return;
    }

    const payload = {
      entitlementName,
      description,
      application,
    };

    console.log("Creating Entitlement with:", payload);

    // Show success snackbar
    setSnackbarMessage("Entitlement created successfully.");
    setSnackbarSeverity("success");
    setSnackbarOpen(true);

    // Go back after short delay
    setTimeout(() => {
      onBack();
    }, 2000);
  };

  return (
    <Box className={styles.container}>
      <Box className={styles.header}>
        <IconButton onClick={onBack} sx={{ color: "white" }}>
          <ArrowBackIcon />
        </IconButton>
        <Typography variant="h6" sx={{ color: "white", ml: 1 }}>
          Create Entitlement
        </Typography>
      </Box>

      <Box className={styles.formCard}>
        <Typography className={styles.sectionTitle}>Entitlement Details</Typography>

        <Grid container spacing={2} sx={{ mt: 1 }}>
          <Grid item xs={12} md={4}>
            <TextField
              fullWidth
              size="small"
              label="Entitlement Name"
              value={entitlementName}
              onChange={(e) => setEntitlementName(e.target.value)}
              InputProps={{ sx: { backgroundColor: "#1E252D", color: "white" } }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          </Grid>
          <Grid item xs={12} md={4}>
            <TextField
              fullWidth
              size="small"
              label="Description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              InputProps={{ sx: { backgroundColor: "#1E252D", color: "white" } }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          </Grid>
          <Grid item xs={12} md={4}>
            <TextField
              fullWidth
              size="small"
              label="Application"
              value={application}
              onChange={(e) => setApplication(e.target.value)}
              InputProps={{ sx: { backgroundColor: "#1E252D", color: "white" } }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          </Grid>
        </Grid>

        <Box sx={{ mt: 3, display: "flex", justifyContent: "flex-end", gap: 2 }}>
          <Button variant="outlined" onClick={onBack} color="inherit">
            Cancel
          </Button>
          <Button variant="contained" onClick={handleSubmit}>
            Submit
          </Button>
        </Box>
      </Box>

      {/* Snackbar for feedback */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={() => setSnackbarOpen(false)}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert
          severity={snackbarSeverity}
          onClose={() => setSnackbarOpen(false)}
          sx={{ width: "100%" }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
}
