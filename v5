import React, { useState } from "react";
import Sidebar from "../../components/Dashboard/Sidebar/Sidebar";
import styles from "./Dashboard.module.css";
import LandingDashBoard from "./LandingDashboard/LandingDashboard";
import DataPolicyView from "../DataPolicies/DataPolicyView";
import CreateNewPolicy from "../DataPolicies/CreateNewPolicy";
import DataProfileView from "../DataProfile/DataProfileView";
import CreateNewDataProfile from "../DataProfile/CreateNewDataProfile";
import EditDataProfile from "../DataProfile/EditDataProfile";
import EditDataPolicy from "../DataPolicies/EditDataPolicy";
import DeleteDataProfile from "../DataProfile/DeleteDataProfile";
import DeleteDataPolicy from "../DataPolicies/DeleteDataPolicy";
import AppManagementview from "../AppManagement/AppManagementView";
import CreateNewApp from "../AppManagement/CreateNewApp";
import EditExistingApp from "../AppManagement/EditExistingApp";
import DeleteExistingApp from "../AppManagement/DeleteExistingApp";
import CreateNewFeature from "../AppManagement/CreateNewFeature";
import CreateNewAction from "../AppManagement/CreateNewAction";
import EntitlementView from "../Entitlement/EntitlementView";
import CreateNewEntitlement from "../Entitlement/CreateNewEntitlement";
import EditEntitlement from "../Entitlement/EditEntitlement";
import DeleteEntitlement from "../Entitlement/DeleteEntitlement";
import EditExistingFeature from "../AppManagement/EditExistingFeature";
import DeleteExistingFeature from "../AppManagement/DeleteExistingFeature";
import EditExistingAction from "../AppManagement/EditExistingAction";
import DeleteExistingAction from "../AppManagement/DeleteExistingAction";
import EntitlementUserView from "../EntitlementUser/EntitlementUserView";
import CreateEntitlementUser from "../EntitlementUser/CreateEntitlementUser";
import CreateEntitlementEntilementUser from "../EntitlementUser/CreateEntitlementEntilementUser";
import EditEntitlementUser from "../EntitlementUser/EditEntitlementUser";
import ReportsPageView from "../Reports/ReportsPageView";

const Dashboard: React.FC = () => {
  const [activeTab, setActiveTab] = useState<String>("home");
  const [selectedProfileId, setSelectedProfileId] = useState<string | null>(null);
  const [selectedPolicyId, setSelectedPolicyId] = useState<string | null>(null);
  const [selectedAppId, setSelctedAppId] = useState<string | null>(null);
  const [selectedFeatureId, setSelectedFeatureId] = useState<string | null>(null);
  const [selectedActionId, setSelectedActionId] = useState<string | null>(null);
  const [selectedEntitlementId, setSelectedEntitlementId] = useState<string | null>(null);
  const [selectedAccountId, setSelectedAccountId] = useState<string | null>(null);
  
  // Add state for selected application in Entitlement User view
  const [entitlementUserApp, setEntitlementUserApp] = useState<string>("SAIL");

  const handleEditProfile = (id: string) => {
    setSelectedProfileId(id);
    setActiveTab("edit-profile");
  };
  
  const handleEditPolicy = (id: string) => {
    setSelectedPolicyId(id);
    setActiveTab("edit-policy");
  };
  
  const handleDeletePolicy = (id: string) => {
    setSelectedPolicyId(id);
    setActiveTab("delete-policy");
  };
  
  const handleDeleteProfile = (id: string) => {
    setSelectedProfileId(id);
    setActiveTab("delete-profile");
  };
  
  const handleEditApp = (id: string) => {
    setSelctedAppId(id);
    setActiveTab("edit-app");
  };
  
  const handleDeleteApp = (id: string) => {
    setSelctedAppId(id);
    setActiveTab("delete-app");
  };
  
  const handleEditFeature = (id: string) => {
    setSelectedFeatureId(id);
    setActiveTab("edit-feature");
  };
  
  const handleDeleteFeature = (id: string) => {
    setSelectedFeatureId(id);
    setActiveTab("delete-feature");
  };
  
  const handleEditAction = (id: string) => {
    setSelectedActionId(id);
    setActiveTab("edit-action");
  };
  
  const handleDeleteAction = (id: string) => {
    setSelectedActionId(id);
    setActiveTab("delete-action");
  };
  
  const handleEditEntitlement = (id: string) => {
    setSelectedEntitlementId(id);
    setActiveTab("edit-entitlement");
  };
  
  const handleDeleteEntitlement = (id: string) => {
    setSelectedEntitlementId(id);
    setActiveTab("delete-entitlement");
  };

  return (
    <div className={styles.container}>
      <Sidebar onNavigate={setActiveTab} />
      {/* Content area */}
      <div className={styles.content}>
        {/* Content changes based on activeTab */}
        {activeTab === "home" && <LandingDashBoard onNavigate={setActiveTab} />}
        {activeTab === "app-management" && (
          <AppManagementview
            onNavigate={setActiveTab}
            onEditApp={handleEditApp}
            onDeleteApp={handleDeleteApp}
            onEditFeature={handleEditFeature}
            onDeleteFeature={handleDeleteFeature}
            onEditAction={handleEditAction}
            onDeleteAction={handleDeleteAction}
          />
        )}
        {activeTab === "add-app" && (
          <CreateNewApp onBack={() => setActiveTab("app-management")} />
        )}
        {activeTab === "edit-app" && (
          <EditExistingApp
            appId={selectedAppId as string | null}
            onBack={() => setActiveTab("app-management")}
          />
        )}
        {activeTab === "delete-app" && (
          <DeleteExistingApp
            appId={selectedAppId as string | null}
            onBack={() => setActiveTab("app-management")}
          />
        )}
        {activeTab === "add-feature" && (
          <CreateNewFeature onBack={() => setActiveTab("app-management")} />
        )}
        {activeTab === "add-action" && (
          <CreateNewAction onBack={() => setActiveTab("app-management")} />
        )}
        {activeTab === "edit-feature" && (
          <EditExistingFeature
            featureId={selectedFeatureId}
            onBack={() => setActiveTab("app-management")}
          />
        )}
        {activeTab === "delete-feature" && (
          <DeleteExistingFeature
            featureId={selectedFeatureId}
            onBack={() => setActiveTab("app-management")}
          />
        )}
        {activeTab === "edit-action" && (
          <EditExistingAction
            actionId={selectedActionId}
            onBack={() => setActiveTab("app-management")}
          />
        )}
        {activeTab === "delete-action" && (
          <DeleteExistingAction
            actionId={selectedActionId}
            onBack={() => setActiveTab("app-management")}
          />
        )}
        {activeTab === "data-policies" && (
          <DataPolicyView
            onDeletePolicy={handleDeletePolicy}
            onNewPolicy={() => setActiveTab("create-policy")}
            onEditPolicy={handleEditPolicy}
          />
        )}
        {activeTab === "create-policy" && (
          <CreateNewPolicy onBack={() => setActiveTab("data-policies")} />
        )}
        {activeTab === "edit-policy" && (
          <EditDataPolicy
            policyId={selectedPolicyId as string | null}
            onBack={() => setActiveTab("data-policies")}
          />
        )}
        {activeTab === "delete-policy" && (
          <DeleteDataPolicy
            policyId={selectedPolicyId as string | null}
            onBack={() => setActiveTab("data-policies")}
          />
        )}
        {activeTab === "data-profiles" && (
          <DataProfileView
            onDeleteProfile={handleDeleteProfile}
            onNewProfile={() => setActiveTab("create-profile")}
            onEditProfile={handleEditProfile}
          />
        )}
        {activeTab === "create-profile" && (
          <CreateNewDataProfile onBack={() => setActiveTab("data-profiles")} />
        )}
        {activeTab === "edit-profile" && (
          <EditDataProfile
            profileId={selectedProfileId as string | null}
            onBack={() => setActiveTab("data-profiles")}
          />
        )}
        {activeTab === "delete-profile" && (
          <DeleteDataProfile
            profileId={selectedProfileId as string | null}
            onBack={() => setActiveTab("data-profiles")}
          />
        )}
        {activeTab === "entitlements" && (
          <EntitlementView
            onNewEntitlement={() => setActiveTab("create-entitlement")}
            onEditEntitlement={handleEditEntitlement}
            onDeleteEntitlement={handleDeleteEntitlement}
          />
        )}
        {activeTab === "edit-entitlement" && (
          <EditEntitlement
            entitlementId={selectedEntitlementId as string | null}
            onBack={() => setActiveTab("entitlements")}
          />
        )}
        {activeTab === "delete-entitlement" && (
          <DeleteEntitlement
            entitlementId={selectedEntitlementId as string | null}
            onBack={() => setActiveTab("entitlements")}
          />
        )}
        {activeTab === "create-entitlement" && (
          <CreateNewEntitlement onBack={() => setActiveTab("entitlements")} />
        )}

        {activeTab === "create-account" && (
          <CreateEntitlementUser
            onBack={() => setActiveTab("entitlement-users")}
          />
        )}
        {activeTab === "create-entitlement-user" && (
          <CreateEntitlementEntilementUser
            onBack={() => setActiveTab("entitlement-users")}
          />
        )}
        {activeTab === "entitlement-users" && (
          <EntitlementUserView
            onNavigate={setActiveTab}
            onEditAccount={(id: string) => {
              setSelectedAccountId(id);
              setActiveTab("edit-account");
            }}
            // Pass the selected app and setter
            selectedApp={entitlementUserApp}
            setSelectedApp={setEntitlementUserApp}
          />
        )}

        {activeTab === "edit-account" && selectedAccountId && (
          <EditEntitlementUser
            accountId={selectedAccountId}
            // Use the correct selected app
            selectedApp={entitlementUserApp}
            onBack={() => setActiveTab("entitlement-users")}
          />
        )}

        {activeTab === "reports-page" && <ReportsPageView />}
      </div>
    </div>
  );
};

export default Dashboard;
