import * as React from "react";
import axios from "axios";
import Grid from "@mui/material/Grid";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import MaterialTable from "../../../Root/components/MaterialTableOld";
import {
  InputAdornment,
  TextField,
  Typography,
  CircularProgress,
  Divider,
  MenuItem,
  Select,
  FormControl,
  SelectChangeEvent,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Autocomplete,
  Chip,
  List,
  ListItem,
  ListItemText,
  IconButton,
  Collapse,
} from "@mui/material";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import SearchIcon from "@mui/icons-material/Search";
import { Tabs } from "antd";
import Drawer from "@mui/material/Drawer";
import styles from "./EntitlementUserView.module.css";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import RemoveCircleIcon from "@mui/icons-material/RemoveCircle";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import ExpandLessIcon from "@mui/icons-material/ExpandLess";
import { Service } from "../../../Root/import";
import { ContainerProvider, useContainerDispatcher } from "../../../Root/import";

const { TabPane } = Tabs;

interface AccountRow {
  accountOwner: string;
  accountName: string;
  accountType: string;
  accessRoles: { roleName: string }[];
  accountStatus: string;
}

interface EntitlementRow {
  entitlementName: string;
  entitlementDescription: string;
  entitlementOwner: string;
  isPrivileged: string;
}

interface UserEntitlement {
  entitlementName: string;
  entitlementId: string;
  appName: string;
  itamName: string;
  appId: string;
}

export default function EntitlementUserView({
  onNavigate,
  onEditAccount,
  selectedApp,
  setSelectedApp,
}: {
  onNavigate?: (tab: string) => void;
  onEditAccount?: (id: string, appName: string) => void;
  selectedApp?: string;
  setSelectedApp?: (appName: string) => void;
}) {
  const [activeTab, setActiveTab] = React.useState<"1" | "2">("1");
  const [drawerOpen, setDrawerOpen] = React.useState(false);
  const [drawerData, setDrawerData] = React.useState<any>(null);
  const [searchTerm, setSearchTerm] = React.useState("");
  const [appList, setAppList] = React.useState<string[]>([]);
  const [accounts, setAccounts] = React.useState<AccountRow[]>([]);
  const [entitlements, setEntitlements] = React.useState<EntitlementRow[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState("");
  const [confirmDeleteOpen, setConfirmDeleteOpen] = React.useState(false);
  const [userEntitlements, setUserEntitlements] = React.useState<UserEntitlement[]>([]);
  const [removingEntitlements, setRemovingEntitlements] = React.useState(false);
  const [expandedApps, setExpandedApps] = React.useState<Record<string, boolean>>({});
  const [ContainerStore] = ContainerProvider.useContext();
  const userId = ContainerStore?.user?.userId;

  const loadAppList = async () => {
    try {
      const { data } = await Service.getService('/fmces/p00/fmces/v1/application/all', {
        headers: { user_id: userId, access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXSwiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNS",
      });
      setAppList(data.map((app: any) => app.appName));
    } catch {
      setAppList(["Please select application"]);
    }
  };

  const loadAllAccounts = async () => {
    setError("");
    try {
      setLoading(true);
      const { data } = await Service.getService(
        "/fmces/p00/restService/onecert/v1/account",
        {
          headers: { applicationName: selectedApp, user_id: userId, access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXWSiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNS", },
        }
      );
      setAccounts(data.accounts || []);
    } catch {
      setError("Failed to load accounts");
    } finally {
      setLoading(false);
    }
  };

  const loadAllEntitlements = async () => {
    setError("");
    try {
      setLoading(true);
      const { data } = await Service.getService(
        "/fmces/p00/restService/onecert/v1/entitlement",
        {
          headers: { applicationName: selectedApp, user_id: userId, access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXWSiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNS", },
        }
      );
      setEntitlements(data.entitlements || []);
    } catch {
      setError("Failed to load entitlements");
    } finally {
      setLoading(false);
    }
  };

  const fetchUserEntitlements = async (accountName: string) => {
    try {
      const response = await Service.getService(
        `/fmces/v1/entitlement/user/${accountName}`,
        {
          headers: { 
            user_id: userId, 
            access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXWSiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNS", 
          },
        }
      );
      setUserEntitlements(response.data);
      return response.data;
    } catch (error: any) {
      if (error.response && error.response.status === 404) {
        setUserEntitlements([]);
        return [];
      }
      throw error;
    }
  };

  React.useEffect(() => {
    loadAppList();
  }, []);

  React.useEffect(() => {
    if (activeTab === "1") loadAllAccounts();
    else loadAllEntitlements();
  }, [activeTab, selectedApp]);

  const handleSearch = async () => {
    setError("");
    if (!searchTerm) {
      activeTab === "1" ? loadAllAccounts() : loadAllEntitlements();
      return;
    }

    try {
      setLoading(true);
      if (activeTab === "1") {
        const { data } = await Service.getService(
          `/fmces/p00/restService/onecert/v1/account/${encodeURIComponent(searchTerm)}`,
          { headers: { applicationName: selectedApp, user_id: userId, access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXWSiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNS", } }
        );
        setAccounts(data ? [data] : []);
      } else {
        const { data } = await Service.getService(
          `/fmces/p00/restService/onecert/v1/entitlement/${encodeURIComponent(searchTerm)}`,
          { headers: { applicationName: selectedApp, user_id: userId, access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXWSiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNS", } }
        );
        setEntitlements(data ? [data] : []);
      }
    } catch {
      setError("No results found");
    } finally {
      setLoading(false);
    }
  };

  const openDrawer = async (row: any) => {
    setDrawerData(row);
    setDrawerOpen(true);
    
    if (activeTab === "1") {
      try {
        await fetchUserEntitlements(row.accountName);
      } catch (error) {
        console.error("Error fetching user entitlements", error);
      }
    }
  };

  const removeEntitlement = async (entitlement: UserEntitlement) => {
    try {
      await Service.postService(
        "/fmces/p00/restService/onecert/v1/removeEntitlement",
        {
          accountName: drawerData.accountName,
          accountOwner: drawerData.accountOwner,
          accessRoles: [{
            roleName: entitlement.entitlementName,
            entitlementName: entitlement.entitlementName,
            entitlementDescription: `Removing entitlement for deletion`,
            entitlementOwner: drawerData.accountOwner,
            isPrivileged: "No"
          }],
          applicationName: entitlement.appName
        },
        {
          headers: { 
            applicationName: entitlement.appName, 
            user_id: userId,
            access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXWSiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNS", 
          },
        }
      );
      
      // Remove the entitlement from the local state
      setUserEntitlements(prev => prev.filter(e => 
        e.entitlementId !== entitlement.entitlementId || e.appName !== entitlement.appName
      ));
      
      return true;
    } catch (error) {
      console.error("Error removing entitlement", error);
      setError(`Failed to remove entitlement: ${entitlement.entitlementName}`);
      return false;
    }
  };

  const removeAllEntitlements = async () => {
    setRemovingEntitlements(true);
    try {
      // Create a copy of the entitlements array
      const entitlementsToRemove = [...userEntitlements];
      
      // Remove all entitlements one by one
      for (const entitlement of entitlementsToRemove) {
        await removeEntitlement(entitlement);
      }
      
      return true;
    } catch (error) {
      console.error("Error removing all entitlements", error);
      setError("Failed to remove all entitlements");
      return false;
    } finally {
      setRemovingEntitlements(false);
    }
  };

  const removeAllFromCurrentApp = async () => {
    if (!selectedApp || !drawerData) return;
    
    setRemovingEntitlements(true);
    try {
      // Filter entitlements for the current application
      const currentAppEntitlements = userEntitlements.filter(e => e.appName === selectedApp);
      
      // Remove all entitlements for the current app
      for (const entitlement of currentAppEntitlements) {
        await removeEntitlement(entitlement);
      }
      
      // Refresh the accounts list to reflect changes
      loadAllAccounts();
      
      setSnackbarMessage(`All entitlements removed from ${selectedApp}`);
      setSnackbarSeverity("success");
      setSnackbarOpen(true);
    } catch (error) {
      console.error("Error removing entitlements from current app", error);
      setError("Failed to remove entitlements from current application");
    } finally {
      setRemovingEntitlements(false);
    }
  };

  const handleDeleteClick = async (accountName: string) => {
    try {
      // Fetch user entitlements across all applications
      const entitlements = await fetchUserEntitlements(accountName);
      setUserEntitlements(entitlements);
      setConfirmDeleteOpen(true);
    } catch (error) {
      console.error("Error fetching user entitlements", error);
      setError("Failed to fetch user entitlements");
    }
  };

  const handleConfirmDelete = async () => {
    if (userEntitlements.length > 0) {
      // If user has entitlements, remove them first
      const success = await removeAllEntitlements();
      if (success) {
        // After removing all entitlements, the account should be automatically deleted
        // Refresh the accounts list to reflect the change
        loadAllAccounts();
        setConfirmDeleteOpen(false);
        setDrawerOpen(false);
        setSnackbarMessage("All entitlements removed and account deleted");
        setSnackbarSeverity("success");
        setSnackbarOpen(true);
      }
    } else {
      // If no entitlements, try to delete the account directly
      try {
        await Service.deleteService(
          `/fmces/p00/restService/onecert/v1/deleteAccount/${encodeURIComponent(drawerData.accountName)}`,
          {
            headers: { 
              applicationName: selectedApp, 
              user_id: userId, 
              access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXWSiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNS", 
            },
          }
        );
        loadAllAccounts();
        setDrawerOpen(false);
        setConfirmDeleteOpen(false);
        setSnackbarMessage("Account deleted successfully");
        setSnackbarSeverity("success");
        setSnackbarOpen(true);
      } catch (err: any) {
        // If the account was already deleted after removing all entitlements
        if (err.response && err.response.status === 404) {
          loadAllAccounts();
          setDrawerOpen(false);
          setConfirmDeleteOpen(false);
          setSnackbarMessage("Account deleted successfully");
          setSnackbarSeverity("success");
          setSnackbarOpen(true);
        } else {
          console.error("Failed to delete account", err);
          setError("Failed to delete account");
        }
      }
    }
  };

  const toggleAppExpansion = (appName: string) => {
    setExpandedApps(prev => ({
      ...prev,
      [appName]: !prev[appName]
    }));
  };

  // Group entitlements by application
  const entitlementsByApp = userEntitlements.reduce((acc, entitlement) => {
    if (!acc[entitlement.appName]) {
      acc[entitlement.appName] = [];
    }
    acc[entitlement.appName].push(entitlement);
    return acc;
  }, {} as Record<string, UserEntitlement[]>);

  // Check if user has entitlements in the current application
  const hasEntitlementsInCurrentApp = selectedApp && 
    userEntitlements.some(e => e.appName === selectedApp);

  return (
    <div className={styles.container}>
      <Typography
        fontFamily="Poppins"
        sx={{ fontWeight: 500, fontSize: 20, color: "white", mb: 2 }}
      >
        Entitlement Users
      </Typography>

      <Box display="flex" alignItems="center" gap={2, flexWrap: "wrap", mb: 2}>
        <Autocomplete
          freeSolo
          size="small"
          options={appList}
          value={selectedApp}
          onChange={(_e, newValue) => setSelectedApp?.(newValue || "")}
          inputValue={selectedApp}
          onInputChange={(_e, newInputValue) => {
            if (setSelectedApp) {
              setSelectedApp(newInputValue);
            }
          }}
          renderInput={(params) => (
            <TextField
              {...params}
              placeholder="Select application"
              sx={{ backgroundColor: "#1E252D", color: "white" }}
            />
          )}
          sx={{ minWidth: 200 }}
        />

        <Box display="flex" gap={1} alignItems="center">
          <TextField
            placeholder={
              activeTab === "1"
                ? "Search by owner/name"
                : "Search entitlement name"
            }
            size="small"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon sx={{ color: "#CBCBCB" }} />
                </InputAdornment>
              ),
              sx: {
                backgroundColor: "#1E252D",
                color: "white",
                borderRadius: 1,
              },
            }}
          />
          <Button
            variant="contained"
            size="small"
            onClick={handleSearch}
            sx={{ height: 36, textTransform: "none" }}
          >
            Search
          </Button>
        </Box>

        <Button
          variant="contained"
          startIcon={<AddCircleIcon />}
          onClick={() => onNavigate?.("create-account")}
          sx={{ height: 36, fontWeight: 600, fontSize: 12 }}
        >
          Create Account
        </Button>
      </Box>

      <Tabs
        activeKey={activeTab}
        onChange={(k) => {
          setActiveTab(k as "1" | "2");
          setSearchTerm("");
          setDrawerOpen(false);
          setDrawerData(null); 
        }}
        className={styles.tabs}
      >
        <TabPane
          tab={
            <span
              style={{
                fontWeight: 600,
                color: activeTab === "1" ? "#007BFF" : "#8D8D8D",
              }}
            >
              Accounts
            </span>
          }
          key="1"
        />
        <TabPane
          tab={
            <span
              style={{
                fontWeight: 600,
                color: activeTab === "2" ? "#007BFF" : "#8D8D8D",
              }}
            >
              Entitlements
            </span>
          }
          key="2"
        />
      </Tabs>

      <Box className={styles.tableSection}>
        {loading ? (
          <Box sx={{ textAlign: "center", p: 4 }}>
            <CircularProgress sx={{ color: "white" }} />
          </Box>
        ) : error ? (
          <Typography sx={{ color: "red", textAlign: "center" }}>
            {error}
          </Typography>
        ) : (
          <Box
            sx={{
              border: "1px solid #444",
              p: 2,
              borderRadius: 1,
              bgcolor: "#1A2028",
              mt: 2,
            }}
          >
            <MaterialTable
              tableRows={activeTab === "1" ? accounts : entitlements}
              tableCols={
                activeTab === "1"
                  ? [
                      { accessorKey: "accountOwner", header: "Account Owner" },
                      { accessorKey: "accountName", header: "Account Name" },
                      {
                        accessorKey: "accessRoles",
                        header: "Roles",
                        Cell: ({ cell }: any) => {
                          const roles = cell.getValue() || [];
                          return (
                            roles.map((r: any) => r.roleName).join(", ") || "-"
                          );
                        },
                      },
                      {
                        accessorKey: "accountStatus",
                        header: "Status",
                        Cell: ({ cell }: any) => {
                          const v = (cell.getValue() as string).toLowerCase();
                          const active = v === "active";
                          return (
                            <span
                              style={{
                                backgroundColor: active
                                  ? "#2BCBC11A"
                                  : "#ff00001A",
                                color: active ? "#2BCBC1" : "#ff0000",
                                padding: "0.25rem 0.5rem",
                                borderRadius: "20px",
                              }}
                            >
                              {active ? "Enabled" : "Inactive"}
                            </span>
                          );
                        },
                      },
                      { accessorKey: "accountType", header: "Account Type" },
                    ]
                  : [
                      { accessorKey: "entitlementName", header: "Name" },
                      {
                        accessorKey: "entitlementDescription",
                        header: "Description",
                      },
                      { accessorKey: "entitlementOwner", header: "Owner" },
                      { accessorKey: "isPrivileged", header: "Privileged" },
                    ]
              }
              globalSearch={false}
              onRowClick={(r) => openDrawer(r as any)}
            />
          </Box>
        )}
      </Box>

      <Drawer
        anchor="right"
        open={drawerOpen}
        onClose={() => {
          setDrawerOpen(false);
          setDrawerData(null); 
        }}
        sx={{
          "& .MuiDrawer-paper": {
            width: 420,
            bgcolor: "#1A2028",
            p: 3,
            borderLeft: "1px solid #2F3A45",
          },
        }}
      >
        {drawerData && (
          <>
            <Typography
              variant="h6"
              sx={{ color: "white", fontWeight: 600, mb: 1 }}
            >
              {drawerData.accountName || drawerData.entitlementName}
            </Typography>
            <Divider sx={{ bgcolor: "#2F3A45", mb: 2 }} />
            <Box sx={{ bgcolor: "#1E252D", p: 2, borderRadius: 1 }}>
              {activeTab === "1" ? (
                <>
                  <Typography sx={{ color: "#8D8D8D", mb: 0.5 }}>
                    Owner
                  </Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>
                    {drawerData.accountOwner}
                  </Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: 0.5 }}>
                    Roles
                  </Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>
                    {(drawerData.accessRoles || [])
                      .map((r: any) => r.roleName)
                      .join(", ") || "-"}
                  </Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: 0.5 }}>
                    Status
                  </Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>
                    {drawerData.accountStatus}
                  </Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: 0.5 }}>
                    Type
                  </Typography>
                  <Typography sx={{ color: "white" }}>
                    {drawerData.accountType}
                  </Typography>
                </>
              ) : (
                <>
                  <Typography sx={{ color: "#8D8D8D", mb: 0.5 }}>
                    Description
                  </Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>
                    {drawerData.entitlementDescription}
                  </Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: 0.5 }}>
                    Owner
                  </Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>
                    {drawerData.entitlementOwner}
                  </Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: 0.5 }}>
                    Privileged
                  </Typography>
                  <Typography sx={{ color: "white" }}>
                    {drawerData.isPrivileged}
                  </Typography>
                </>
              )}
            </Box>

            {activeTab === "1" && (
              <Box
                sx={{
                  mt: 2,
                  display: "flex",
                  justifyContent: "flex-end",
                  gap: 1,
                  flexWrap: 'wrap'
                }}
              >
                <Button
                  variant="outlined"
                  startIcon={<RemoveCircleIcon />}
                  sx={{
                    color: "white",
                    borderColor: "white",
                    textTransform: "none",
                  }}
                  onClick={removeAllFromCurrentApp}
                  disabled={!hasEntitlementsInCurrentApp || removingEntitlements}
                >
                  Remove from {selectedApp}
                </Button>
                <Button
                  variant="outlined"
                  startIcon={<DeleteIcon />}
                  sx={{
                    color: "white",
                    borderColor: "white",
                    textTransform: "none",
                  }}
                  onClick={() => handleDeleteClick(drawerData.accountName)}
                >
                  Delete
                </Button>
                <Button
                  variant="contained"
                  startIcon={<EditIcon />}
                  sx={{ textTransform: "none" }}
                  onClick={() => {
                    if (drawerData?.accountName && selectedApp) {
                      onEditAccount?.(drawerData.accountName, selectedApp);
                    }
                  }}
                >
                  Edit
                </Button>
              </Box>
            )}
          </>
        )}
      </Drawer>

      <Dialog
        open={confirmDeleteOpen}
        onClose={() => setConfirmDeleteOpen(false)}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: {
            backgroundColor: "#1A2028",
            color: "white",
            border: "1px solid #2F3A45"
          }
        }}
      >
        <DialogTitle sx={{ color: "white", borderBottom: "1px solid #2F3A45" }}>
          {userEntitlements.length > 0 ? "Account Has Entitlements" : "Confirm Deletion"}
        </DialogTitle>
        <DialogContent>
          {userEntitlements.length > 0 ? (
            <>
              <DialogContentText sx={{ mb: 2, color: "#CBCBCB" }}>
                This account has entitlements in {Object.keys(entitlementsByApp).length} application(s). 
                All entitlements must be removed before the account can be deleted.
              </DialogContentText>
              
              <Box sx={{ maxHeight: 400, overflow: 'auto' }}>
                {Object.entries(entitlementsByApp).map(([appName, entitlements]) => (
                  <Box key={appName} sx={{ mb: 2 }}>
                    <Box 
                      sx={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        justifyContent: 'space-between',
                        backgroundColor: '#262B36',
                        p: 1.5,
                        borderRadius: 1,
                        cursor: 'pointer',
                        border: '1px solid #2F3A45'
                      }}
                      onClick={() => toggleAppExpansion(appName)}
                    >
                      <Typography variant="subtitle1" fontWeight="bold" sx={{ color: "white" }}>
                        {appName} ({entitlements.length} entitlements)
                      </Typography>
                      <IconButton size="small" sx={{ color: "white" }}>
                        {expandedApps[appName] ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                      </IconButton>
                    </Box>
                    
                    <Collapse in={expandedApps[appName]}>
                      <List dense sx={{ backgroundColor: '#1E252D', borderRadius: 1, mt: 0.5 }}>
                        {entitlements.map((entitlement) => (
                          <ListItem key={entitlement.entitlementId} sx={{ pl: 4, borderBottom: '1px solid #2F3A45' }}>
                            <ListItemText 
                              primary={entitlement.entitlementName} 
                              primaryTypographyProps={{ sx: { color: 'white' } }}
                              secondary={`ID: ${entitlement.entitlementId}`}
                              secondaryTypographyProps={{ sx: { color: '#8D8D8D' } }}
                            />
                            <Button
                              size="small"
                              color="error"
                              variant="outlined"
                              onClick={() => removeEntitlement(entitlement)}
                              disabled={removingEntitlements}
                              sx={{ 
                                color: '#ff6b6b', 
                                borderColor: '#ff6b6b',
                                '&:hover': {
                                  backgroundColor: '#ff6b6b20',
                                  borderColor: '#ff6b6b'
                                }
                              }}
                            >
                              Remove
                            </Button>
                          </ListItem>
                        ))}
                      </List>
                    </Collapse>
                  </Box>
                ))}
              </Box>
            </>
          ) : (
            <DialogContentText sx={{ color: "#CBCBCB" }}>
              Are you sure you want to delete account "{drawerData?.accountName}"?
            </DialogContentText>
          )}
        </DialogContent>
        <DialogActions sx={{ borderTop: "1px solid #2F3A45", p: 2 }}>
          <Button 
            onClick={() => setConfirmDeleteOpen(false)} 
            color="primary"
            disabled={removingEntitlements}
            sx={{ color: "white" }}
          >
            Cancel
          </Button>
          {userEntitlements.length > 0 ? (
            <Button
              onClick={handleConfirmDelete}
              color="error"
              variant="contained"
              disabled={removingEntitlements}
              sx={{
                backgroundColor: "#ff6b6b",
                '&:hover': {
                  backgroundColor: "#ff5252"
                }
              }}
            >
              {removingEntitlements ? (
                <>
                  <CircularProgress size={16} sx={{ mr: 1, color: "white" }} />
                  Removing Entitlements...
                </>
              ) : (
                "Remove All & Delete"
              )}
            </Button>
          ) : (
            <Button
              onClick={handleConfirmDelete}
              color="error"
              variant="contained"
              sx={{
                backgroundColor: "#ff6b6b",
                '&:hover': {
                  backgroundColor: "#ff5252"
                }
              }}
            >
              Delete
            </Button>
          )}
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={() => setSnackbarOpen(false)}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert
          severity={snackbarSeverity}
          onClose={() => setSnackbarOpen(false)}
          sx={{ width: "100%" }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </div>
  );
}
