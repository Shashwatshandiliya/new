// src/components/EntitlementUserView/EditEntitlementUser.tsx
import React, { useState, useEffect } from "react";
import {
  Box,
  Button,
  Grid,
  TextField,
  Typography,
  IconButton,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  OutlinedInput,
  Chip,
  Snackbar,
  Alert
} from "@mui/material";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import axios from "axios";
import styles from "./CreateEntitlementUser.module.css";

interface EditEntitlementUserProps {
  accountId: string;      // this is the accountName
  onBack: () => void;
}

const allRoles = ["Maker", "Checker", "Viewer", "Admin"];

export default function EditEntitlementUser({ accountId, onBack }: EditEntitlementUserProps) {
  const [accountName, setAccountName] = useState("");
  const [roles, setRoles] = useState<string[]>([]);
  const [originalRoles, setOriginalRoles] = useState<string[]>([]);
  const [accountType, setAccountType] = useState("");
  const [status, setStatus] = useState("");
  const [loading, setLoading] = useState(false);

  // Snackbar state
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [snackbarSeverity, setSnackbarSeverity] = useState<"success" | "error">("success");

  // Fetch the specific account details when mounted
  useEffect(() => {
    const fetchAccount = async () => {
      try {
        setLoading(true);
        const resp = await axios.get("http://mc.shashwat.com:69696/restService/one/aacc");
        // find the one matching accountName === accountId
        const acct = (resp.data.accounts || []).find(
          (a: any) => a.accountName === accountId
        );
        if (!acct) throw new Error("Account not found");
        setAccountName(acct.accountName);
        const fetchedRoles = acct.accessRoles.map((r: any) => r.roleName);
        setRoles(fetchedRoles);
        setOriginalRoles(fetchedRoles);
        setAccountType(acct.accountType);
        setStatus(acct.accountStatus);
      } catch (err) {
        console.error("Error fetching account", err);
        setSnackbarMessage("Failed to load account details");
        setSnackbarSeverity("error");
        setSnackbarOpen(true);
      } finally {
        setLoading(false);
      }
    };
    fetchAccount();
  }, [accountId]);

  const handleSave = async () => {
    const added = roles.filter(r => !originalRoles.includes(r));
    const removed = originalRoles.filter(r => !roles.includes(r));

    if (added.length === 0 && removed.length === 0) {
      setSnackbarMessage("No changes detected.");
      setSnackbarSeverity("info");
      setSnackbarOpen(true);
      return;
    }

    try {
      setLoading(true);
      // call addEntity if any added
      if (added.length > 0) {
        await axios.post(
          "http://mc.shashwat.com:69696/restService/one/addEntity",
          { accountName, roles: added }
        );
      }
      // call removeEntity if any removed
      if (removed.length > 0) {
        await axios.post(
          "http://mc.shashwat.com:69696/restService/one/removeEntity",
          { accountName, roles: removed }
        );
      }
      setOriginalRoles([...roles]);
      setSnackbarMessage("Roles updated successfully.");
      setSnackbarSeverity("success");
      setSnackbarOpen(true);
    } catch (err) {
      console.error("Error updating roles", err);
      setSnackbarMessage("Failed to update roles.");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box className={styles.container}>
      <Box className={styles.header}>
        <IconButton onClick={onBack} sx={{ color: "white" }}>
          <ArrowBackIcon />
        </IconButton>
        <Typography variant="h6" sx={{ color: "white", ml: 1 }}>
          Edit Account #{accountName || accountId}
        </Typography>
      </Box>

      <Box className={styles.formCard}>
        <Typography className={styles.sectionTitle}>Account Details</Typography>
        <Grid container spacing={2} sx={{ mt: 1 }}>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth label="Account Name" size="small"
              value={accountName} disabled
              InputProps={{ sx: { backgroundColor: "#2F3A45", color: "white" } }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth label="Status" size="small"
              value={status} disabled
              InputProps={{ sx: { backgroundColor: "#2F3A45", color: "white" } }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          </Grid>

          <Grid item xs={12} sm={6}>
            <FormControl fullWidth size="small">
              <InputLabel sx={{ color: "#CBCBCB" }}>Role(s)</InputLabel>
              <Select
                multiple
                value={roles}
                onChange={(e) => setRoles(e.target.value as string[])}
                input={<OutlinedInput label="Role(s)" />}
                renderValue={(sel) => (
                  <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                    {sel.map((v) => (
                      <Chip key={v} label={v} sx={{ bgcolor: "#007BFF", color: "white" }} />
                    ))}
                  </Box>
                )}
                sx={{ bgcolor: "#1E252D", color: "white", borderRadius: 1 }}
              >
                {allRoles.map((r) => (
                  <MenuItem key={r} value={r}>{r}</MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth label="Account Type" size="small"
              value={accountType} disabled
              InputProps={{ sx: { backgroundColor: "#2F3A45", color: "white" } }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          </Grid>
        </Grid>

        <Box sx={{ mt: 3, display: "flex", gap: 2, justifyContent: "flex-end" }}>
          <Button variant="outlined" color="inherit" onClick={onBack} sx={{ textTransform: "none" }}>
            Cancel
          </Button>
          <Button variant="contained" onClick={handleSave} disabled={loading} sx={{ textTransform: "none" }}>
            {loading ? "Saving..." : "Save"}
          </Button>
        </Box>
      </Box>

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={() => setSnackbarOpen(false)}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert severity={snackbarSeverity} onClose={() => setSnackbarOpen(false)} sx={{ width: "100%" }}>
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
}
