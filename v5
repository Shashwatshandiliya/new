// src/components/EntitlementUserView/EditEntitlementUser.tsx
import React, { useState, useEffect } from "react";
import {
  Box,
  Button,
  Grid,
  TextField,
  Typography,
  IconButton,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  OutlinedInput,
  Chip,
  Snackbar,
  Alert
} from "@mui/material";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import axios from "axios";
import styles from "./CreateEntitlementUser.module.css";

interface EditEntitlementUserProps {
  accountId: string;
  onBack: () => void;
}

const dummyRoles = ["Maker", "Checker", "Viewer", "Admin"];

export default function EditEntitlementUser({ accountId, onBack }: EditEntitlementUserProps) {
  const [bankId, setBankId] = useState("");
  const [owner, setOwner] = useState("");
  const [roles, setRoles] = useState<string[]>([]);
  const [originalRoles, setOriginalRoles] = useState<string[]>([]);
  const [accountType, setAccountType] = useState("");
  const [status, setStatus] = useState("");
  const [loading, setLoading] = useState(false);

  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [snackbarSeverity, setSnackbarSeverity] = useState<"success" | "error" | "info">("success");

  useEffect(() => {
    // Replace with actual fetch
    const fetchedRoles = ["Maker", "Checker"];
    setBankId("111111");
    setOwner("2222222");
    setRoles(fetchedRoles);
    setOriginalRoles(fetchedRoles);
    setAccountType("User");
    setStatus("Active");
  }, [accountId]);

  const handleSave = async () => {
    if (roles.length === 0) {
      setSnackbarMessage("At least one role must be selected.");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
      return;
    }

    const added = roles.filter((r) => !originalRoles.includes(r));
    const removed = originalRoles.filter((r) => !roles.includes(r));

    if (added.length === 0 && removed.length === 0) {
      setSnackbarMessage("No changes detected.");
      setSnackbarSeverity("info");
      setSnackbarOpen(true);
      return;
    }

    try {
      setLoading(true);
      const calls: Promise<any>[] = [];

      if (added.length > 0) {
        calls.push(axios.post(`/api/accounts/${accountId}/roles/add`, { roles: added }));
      }

      if (removed.length > 0) {
        calls.push(axios.post(`/api/accounts/${accountId}/roles/remove`, { roles: removed }));
      }

      await Promise.all(calls);

      setSnackbarMessage("Roles updated successfully.");
      setSnackbarSeverity("success");
      setSnackbarOpen(true);
      setOriginalRoles(roles);

      // âœ… Go back after 2 seconds
      setTimeout(() => {
        onBack();
      }, 2000);
    } catch (error) {
      console.error("Error updating roles", error);
      setSnackbarMessage("Failed to update roles.");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box className={styles.container}>
      <Box className={styles.header}>
        <IconButton onClick={onBack} sx={{ color: "white" }}>
          <ArrowBackIcon />
        </IconButton>
        <Typography variant="h6" sx={{ color: "white", ml: 1 }}>
          Edit Account #{accountId}
        </Typography>
      </Box>

      <Box className={styles.formCard}>
        <Typography className={styles.sectionTitle}>Account Details</Typography>
        <Grid container spacing={2} sx={{ mt: 1 }}>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Bank ID"
              size="small"
              value={bankId}
              disabled
              InputProps={{ sx: { backgroundColor: "#2F3A45", color: "white" } }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Account Owner"
              size="small"
              value={owner}
              disabled
              InputProps={{ sx: { backgroundColor: "#2F3A45", color: "white" } }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          </Grid>

          <Grid item xs={12} sm={6}>
            <FormControl fullWidth size="small">
              <InputLabel sx={{ color: "#CBCBCB" }}>Role(s)</InputLabel>
              <Select
                multiple
                value={roles}
                onChange={(e) => setRoles(e.target.value as string[])}
                input={<OutlinedInput label="Role(s)" />}
                renderValue={(selected) => (
                  <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                    {selected.map((value) => (
                      <Chip
                        key={value}
                        label={value}
                        sx={{ backgroundColor: "#007BFF", color: "white" }}
                      />
                    ))}
                  </Box>
                )}
                sx={{
                  backgroundColor: "#1E252D",
                  color: "white",
                  borderRadius: 1,
                }}
              >
                {dummyRoles.map((r) => (
                  <MenuItem key={r} value={r}>
                    {r}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Account Type"
              size="small"
              value={accountType}
              disabled
              InputProps={{ sx: { backgroundColor: "#2F3A45", color: "white" } }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Status"
              size="small"
              value={status}
              disabled
              InputProps={{ sx: { backgroundColor: "#2F3A45", color: "white" } }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          </Grid>
        </Grid>

        <Box sx={{ mt: 3, display: "flex", gap: 2, justifyContent: "flex-end" }}>
          <Button variant="outlined" color="inherit" onClick={onBack} sx={{ textTransform: "none" }}>
            Cancel
          </Button>
          <Button
            variant="contained"
            onClick={handleSave}
            disabled={loading}
            sx={{ textTransform: "none" }}
          >
            {loading ? "Saving..." : "Save"}
          </Button>
        </Box>
      </Box>

      {/* Snackbar */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={() => setSnackbarOpen(false)}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert severity={snackbarSeverity} onClose={() => setSnackbarOpen(false)} sx={{ width: "100%" }}>
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
}
