import React, { useState, useEffect } from "react";
import {
  Box,
  Button,
  Grid,
  IconButton,
  MenuItem,
  Select,
  TextField,
  Typography,
  SelectChangeEvent,
  OutlinedInput,
  Chip,
  Snackbar,
  Alert,
  FormControl,
  InputLabel,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  CircularProgress,
} from "@mui/material";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import styles from "./CreateEntitlementUser.module.css";
import { Service } from "../../../Root/import";
import { ContainerProvider } from "../../../Root/import";

interface CreateEntitlementUserProps {
  onBack: () => void;
}

const accountTypes = ["User", "System"];
const statusOptions = ["Active", "Inactive"];

export default function CreateEntitlementUser({ onBack }: CreateEntitlementUserProps) {
  const [bankId, setBankId] = useState("");
  const [owner, setOwner] = useState("");
  const [roles, setRoles] = useState<string[]>([]);
  const [availableRoles, setAvailableRoles] = useState<string[]>([]);
  const [accountType, setAccountType] = useState("");
  const [status, setStatus] = useState("");
  const [appName, setAppName] = useState("");
  const [appOptions, setAppOptions] = useState<string[]>([]);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [snackbarSeverity, setSnackbarSeverity] = useState<"success" | "error">("success");
  const [checkingUser, setCheckingUser] = useState(false);
  const [userHasEntitlements, setUserHasEntitlements] = useState(false);
  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);
  const [ContainerStore] = ContainerProvider.useContext();
  const userId = ContainerStore?.user?.userId;

  useEffect(() => {
    Service.getService("/fmces/p00/fmces/v1/application/all", {
      headers: { user_id: userId, access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXSwiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNSIsImF1dGhvcml0aWVzIjpbIm9hdXRoMiJdLCJqdGkiOiI4MWJjZDNiNi00ZTU3LTQ5M2YtYjE1NC1hOGEwOWVmOGI5NDEifQ.awfDsU8u6lDUoBPHLsD9t-pCBFwmxtddaWQtZB276j2enhic8a1iz2KBpqs3a3kGmV8ZrhhcT595uXnDWPjsrL6kdtnCfIPyV6CMR-IOWXqksj7NooZ9eUCrpHdm56LVU33DBA_lkZLjPp48YC09npj4202m-OQQrJOCaPFfv9KNdkc9Fg1OPSOLdxQqRjymA2H64Jq1uv3BWe1qA6EqAMCoNsFiALTS-NVWW_CJlGPHL2ZSJXupDltCxaov9CXqO04PBaUWV_EDdsIyasobcQ-GSGiOAYR5LHjKRsX7yzu5gVtCkn7CuslBdsNprCGdvho7f5x7eIqQWfT0RmVc2g" },
    })
      .then(res => setAppOptions(res.data.map((a: any) => a.appName)))
      .catch((err) => {
        console.error(err);
        setAppOptions([]);
      });
  }, []);

  useEffect(() => {
    if (appName) {
      Service.getService("/fmces/p00/restService/onecert/v1/entitlement", {
        headers: { 
          applicationName: appName,
          user_id: userId, 
          access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXWSiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNSIsImF1dGhvcml0aWVzIjpbIm9hdXRoMiJdLCJqdGkiOiI4MWJjZDNiNi00ZTU3LTQ5M2YtYjE1NC1hOGEwOWVmOGI5NDEifQ.awfDsU8u6lDUoBPHLsD9t-pCBFwmxtddaWQtZB276j2enhic8a1iz2KBpqs3a3kGmV8ZrhhcT595uXnDWPjsrL6kdtnCfIPyV6CMR-IOWXqksj7NooZ9eUCrpHdm56LVU33DBA_lkZLjPp48YC09npj4202m-OQQrJOCaPFfv9KNdkc9Fg1OPSOLdxQqRjymA2H64Jq1uv3BWe1qA6EqAMCoNsFiALTS-NVWW_CJlGPHL2ZSJXupDltCxaov9CXqO04PBaUWV_EDdsIyasobcQ-GSGiOAYR5LHjKRsX7yzu5gVtCkn7CuslBdsNprCGdvho7f5x7eIqQWfT0RmVc2g"
        },
      })
      .then(res => setAvailableRoles((res.data?.entitlements || []).map((e: any) => e.entitlementName)))
      .catch((err) => {
        console.error(err);
        setAvailableRoles([]);
      });
    }
  }, [appName]);

  const checkUserEntitlements = async (userId: string) => {
    setCheckingUser(true);
    try {
      const response = await Service.getService(
        `/fmces/v1/entitlement/user/${userId}`,
        {
          headers: { 
            user_id: userId, 
            access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXWSiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNSIsImF1dGhvcml0aWVzIjpbIm9hdXRoMiJdLCJqdGkiOiI4MWJjZDNiNi00ZTU3LTQ5M2YtYjE1NC1hOGEwOWVmOGI5NDEifQ.awfDsU8u6lDUoBPHLsD9t-pCBFwmxtddaWQtZB276j2enhic8a1iz2KBpqs3a3kGmV8ZrhhcT595uXnDWPjsrL6kdtnCfIPyV6CMR-IOWXqksj7NooZ9eUCrpHdm56LVU33DBA_lkZLjPp48YC09npj4202m-OQQrJOCaPFfv9KNdkc9Fg1OPSOLdxQqRjymA2H64Jq1uv3BWe1qA6EqAMCoNsFiALTS-NVWW_CJlGPHL2ZSJXupDltCxaov9CXqO04PBaUWV_EDdsIyasobcQ-GSGiOAYR5LHjKRsX7yzu5gVtCkn7CuslBdsNprCGdvho7f5x7eIqQWfT0RmVc2g"
          },
        }
      );
      
      // If we get a response with data, user has entitlements
      if (response.data && Array.isArray(response.data) && response.data.length > 0) {
        setUserHasEntitlements(true);
        setConfirmDialogOpen(true);
        return true;
      }
      return false;
    } catch (error: any) {
      // If we get a 404 error, user doesn't have entitlements
      if (error.response && error.response.status === 404) {
        setUserHasEntitlements(false);
        return false;
      }
      
      // For other errors, show a message
      setSnackbarMessage("Error checking user entitlements. Please try again.");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
      return false;
    } finally {
      setCheckingUser(false);
    }
  };

  const handleSubmit = async () => {
    if (!bankId || !owner || roles.length === 0 || !accountType || !status || !appName) {
      setSnackbarMessage("Please fill all fields and select at least one role.");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
      return;
    }

    // First check if user already has entitlements
    const hasEntitlements = await checkUserEntitlements(bankId);
    
    // If user doesn't have entitlements, proceed with createAccount
    if (!hasEntitlements) {
      await createAccount();
    }
    // If user has entitlements, the confirmation dialog will handle the next step
  };

  const createAccount = async () => {
    try {
      await Service.postService(
        "/fmces/p00/restService/onecert/v1/createAccount",
        {
          accountName: bankId,
          accountOwner: owner,
          accountType,
          accountStatus: status,
          accountDescription: "",
          isPrivileged: "No",
          lastLogin: new Date().toISOString(),
          applicationName: appName,
          accessRoles: roles.map((role) => ({
            roleName: role,
            entitlementName: role,
            entitlementDescription: "Auto-generated",
            entitlementOwner: owner,
            isPrivileged: "No",
          })),
        },
        {
          headers: { 
            applicationName: appName, 
            user_id: userId,
            access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXWSiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNSIsImF1dGhvcml0aWVzIjpbIm9hdXhoMiJdLCJqdGkiOiI4MWJjZDNiNi00ZTU3LTQ5M2YtYjE1NC1hOGEwOWVmOGI5NDEifQ.awfDsU8u6lDUoBPHLsD9t-pCBFwmxtddaWQtZB276j2enhic8a1iz2KBpqs3a3kGmV8ZrhhcT595uXnDWPjsrL6kdtnCfIPyV6CMR-IOWXqksj7NooZ9eUCrpHdm56LVU33DBA_lkZLjPp48YC09npj4202m-OQQrJOCaPFfv9KNdkc9Fg1OPSOLdxQqRjymA2H64Jq1uv3BWe1qA6EqAMCoNsFiALTS-NVWW_CJlGPHL2ZSJXupDltCxaov9CXqO04PBaUWV_EDdsIyasobcQ-GSGiOAYR5LHjKRsX7yzu5gVtCkn7CuslBdsNprCGdvho7f5x7eIqQWfT0RmVc2g"
          },
        }
      );

      setSnackbarMessage("Entitlement User created successfully.");
      setSnackbarSeverity("success");
      setSnackbarOpen(true);
      resetForm();
    } catch (error: any) {
      const errorMessage = error?.response?.data?.statusMessage || "Failed to create user. Please try again.";
      setSnackbarMessage(errorMessage);
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    }
  };

  const addEntitlement = async () => {
    try {
      await Service.postService(
        "/fmces/p00/restService/onecert/v1/addEntitlement",
        {
          accountName: bankId,
          accountOwner: owner,
          accountType,
          accountStatus: status,
          accountDescription: "",
          isPrivileged: "No",
          lastLogin: new Date().toISOString(),
          applicationName: appName,
          accessRoles: roles.map((role) => ({
            roleName: role,
            entitlementName: role,
            entitlementDescription: "Auto-generated",
            entitlementOwner: owner,
            isPrivilemed: "No",
          })),
        },
        {
          headers: { 
            applicationName: appName, 
            user_id: userId,
            access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX25hbWUiOiIyMDAyMTM1Iiwic2NvcGUiOlsiYXV0aGVudGljYXRpb24iXWSiaXNzIjoiZm1hYSIsImV4cCI6MTc1NTk0ODkxOCwiY2xpZW50X2lkIjoiMjAwMjEzNSIsImF1dGhvcml0aWVzIjpbIm9hdXhoMiJdLCJqdGkiOiI4MWJjZDNiNi00ZTU3LTQ5M2YtYjE1NC1hOGEwOWVmOGI5NDEifQ.awfDsU8u6lDUoBPHLsD9t-pCBFwmxtddaWQtZB276j2enhic8a1iz2KBpqs3a3kGmV8ZrhhcT595uXnDWPjsrL6kdtnCfIPyV6CMR-IOWXqksj7NooZ9eUCrpHdm56LVU33DBA_lkZLjPp48YC09npj4202m-OQQrJOCaPFfv9KNdkc9Fg1OPSOLdxQqRjymA2H64Jq1uv3BWe1qA6EqAMCoNsFiALTS-NVWW_CJlGPHL2ZSJXupDltCxaov9CXqO04PBaUWV_EDdsIyasobcQ-GSGiOAYR5LHjKRsX7yzu5gVtCkn7CuslBdsNprCGdvho7f5x7eIqQWfT0RmVc2g"
          },
        }
      );

      setSnackbarMessage("Entitlement added to existing user successfully.");
      setSnackbarSeverity("success");
      setSnackbarOpen(true);
      resetForm();
    } catch (error: any) {
      const errorMessage = error?.response?.data?.statusMessage || "Failed to add entitlement. Please try again.";
      setSnackbarMessage(errorMessage);
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    }
  };

  const resetForm = () => {
    setBankId("");
    setOwner("");
    setRoles([]);
    setAccountType("");
    setStatus("");
    setAppName("");
    setUserHasEntitlements(false);
  };

  const handleConfirmAddEntitlement = () => {
    setConfirmDialogOpen(false);
    addEntitlement();
  };

  return (
    <Box className={styles.container}>
      <Box className={styles.header}>
        <IconButton onClick={onBack} sx={{ color: "white" }}>
          <ArrowBackIcon />
        </IconButton>
        <Typography variant="h6" sx={{ color: "white", ml: 1 }}>
          Create Account
        </Typography>
      </Box>

      <Box className={styles.formCard}>
        <Typography className={styles.sectionTitle}>Account Details</Typography>

        <Grid container spacing={2} sx={{ mt: 1 }}>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              variant="outlined"
              label="Bank ID"
              size="small"
              value={bankId}
              onChange={(e) => setBankId(e.target.value)}
              InputProps={{ sx: { backgroundColor: "#1E252D", color: "white" } }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          </Grid>

          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              variant="outlined"
              label="Account Owner"
              size="small"
              value={owner}
              onChange={(e) => setOwner(e.target.value)}
              InputProps={{ sx: { backgroundColor: "#1E252D", color: "white" } }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          </Grid>

          <Grid item xs={12} md={6}>
            <Select
              fullWidth
              displayEmpty
              size="small"
              value={appName}
              onChange={(e: SelectChangeEvent) => setAppName(e.target.value)}
              sx={{ backgroundColor: "#1E252D", color: appName ? "white" : "#CBCBCB", borderRadius: 1 }}
              renderValue={(selected) => selected || "Select Application"}
            >
              {appOptions.map((a) => (
                <MenuItem key={a} value={a}>{a}</MenuItem>
              ))}
            </Select>
          </Grid>

          <Grid item xs={12} md={6}>
            <FormControl fullWidth size="small">
              <InputLabel sx={{ color: "#CBCBCB" }}>Entitlement</InputLabel>
              <Select
                multiple
                value={roles}
                onChange={(e) => setRoles(e.target.value as string[])}
                input={<OutlinedInput label="Role(s)" />}
                renderValue={(selected) => (
                  <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                    {selected.map((value) => (
                      <Chip
                        key={value}
                        label={value}
                        sx={{ backgroundColor: "#007BFF", color: "white" }}
                      />
                    ))}
                  </Box>
                )}
                sx={{ backgroundColor: "#1E252D", color: "white", borderRadius: 1 }}
              >
                {availableRoles.map((r) => (
                  <MenuItem key={r} value={r}>{r}</MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} md={6}>
            <Select
              fullWidth
              displayEmpty
              size="small"
              value={accountType}
              onChange={(e: SelectChangeEvent) => setAccountType(e.target.value)}
              sx={{ backgroundColor: "#1E252D", color: accountType ? "white" : "#CBCBCB", borderRadius: 1 }}
              renderValue={(selected) => selected || "Account Type"}
            >
              {accountTypes.map((t) => (
                <MenuItem key={t} value={t}>{t}</MenuItem>
              ))}
            </Select>
          </Grid>

          <Grid item xs={12} md={6}>
            <Select
              fullWidth
              displayEmpty
              size="small"
              value={status}
              onChange={(e: SelectChangeEvent) => setStatus(e.target.value)}
              sx={{ backgroundColor: "#1E252D", color: status ? "white" : "#CBCBCB", borderRadius: 1 }}
              renderValue={(selected) => selected || "Status"}
            >
              {statusOptions.map((s) => (
                <MenuItem key={s} value={s}>{s}</MenuItem>
              ))}
            </Select>
          </Grid>
        </Grid>

        <Box sx={{ mt: 3, display: "flex", gap: 2, justifyContent: "flex-end" }}>
          <Button variant="outlined" color="inherit" onClick={onBack} sx={{ textTransform: "none" }}>
            Cancel
          </Button>
          <Button 
            variant="contained" 
            onClick={handleSubmit} 
            sx={{ textTransform: "none" }}
            disabled={checkingUser}
          >
            {checkingUser ? <CircularProgress size={24} /> : "Create"}
          </Button>
        </Box>
      </Box>

      <Dialog
        open={confirmDialogOpen}
        onClose={() => setConfirmDialogOpen(false)}
      >
        <DialogTitle>User Already Has Entitlements</DialogTitle>
        <DialogContent>
          <DialogContentText>
            This user already has existing entitlements. Would you like to add the selected entitlements to this user instead of creating a new account?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfirmDialogOpen(false)} color="primary">
            Cancel
          </Button>
          <Button onClick={handleConfirmAddEntitlement} color="primary" variant="contained">
            Add Entitlements
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={() => setSnackbarOpen(false)}
        anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
      >
        <Alert
          severity={snackbarSeverity}
          onClose={() => setSnackbarOpen(false)}
          sx={{ width: "100%" }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
}
