import * as React from "react";
import Grid from "@mui/material/Grid";
import IconButton from "@mui/material/IconButton";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import MaterialTable from "../../../Root/components/MaterialTable";
import { InputAdornment, Select, TextField, Typography } from "@mui/material";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import FolderIcon from '@mui/icons-material/Folder';
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import { Tabs } from "antd";
import Drawer from "@mui/material/Drawer";
import styles from "./AppManagement.module.css";
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import Menu from "@mui/material/Menu";
import MenuItem from "@mui/material/MenuItem";
import axios from "axios";

const { TabPane } = Tabs;

interface AppManagementProps {
  onNavigate?: (tab: string) => void;
}

interface AppManagementRow {
  "app name": string;
  "app id": string;
  status: string;
  "appDesc": string;
  "number of features": string;
  "number of actions": string;
  "last modified": string;
  features?: { name: string; featureId: string; status: string; usersAssigned: string; lastModified: string }[];
  actions?: { name: string; actionId: string; status: string; usersAssigned: string; lastModified: string }[];
}

const AppManagementview: React.FC<AppManagementProps> = ({ onNavigate }) => {
  const [activeAppTab, setActiveAppTab] = React.useState("1");
  const [tabRow, setTabRow] = React.useState<AppManagementRow[]>([]);
  const [rowCount, setRowCount] = React.useState(0);
  const [selectedDate, setSelectedDate] = React.useState("");
  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);
  const [drawerData, setDrawerData] = React.useState<AppManagementRow | null>(null);

  // ──────────────────────────────────────────────────────────
  // new: features list fetched from backend
  const [featuresData, setFeaturesData] = React.useState<{
    name: string;
    featureId: string;
    status: string;
    usersAssigned: string;
    lastModified: string;
  }[]>([]);
  // ──────────────────────────────────────────────────────────

  React.useEffect(() => {
    const fetchApplications = async (): Promise<any> => {
      try {
        const response = await axios.get(
          'http://uklvauems02a.uk.standardchartered.com:8083/fmces/v1/applicationsWithCountOfFeaturesAndActions'
        );
        const data = response.data.map((item: any) => ({
          "app name": item.appName,
          "app id": item.appID,
          "appDesc": item.appDesc,
          "number of features": String(item.totalNumberOfFeatures),
          "number of actions": String(item.totalNumberOfActions),
          status: item.status,
          "last modified": new Date(item.lastUpdated).toLocaleDateString(),
          features: item.features,    // keep nested arrays for Actions tab
          actions: item.actions,      // keep nested arrays for Actions tab
        }));
        setTabRow(data);
        setRowCount(data.length);
      } catch (error) {
        console.error('Error fetching data profiles', error);
      }
    };
    fetchApplications();
  }, []);

  // ──────────────────────────────────────────────────────────
  // fetch features when Features tab is active
  React.useEffect(() => {
    if (activeAppTab !== "2") return;

    const fetchFeatures = async () => {
      try {
        const resp = await axios.get(
          "http://uklvauems02a.uk.standardchartered.com:8083/fmces/v1/features"
        );
        setFeaturesData(
          resp.data.map((f: any) => ({
            name: f.featureName,
            featureId: String(f.featureId),
            status: f.application.isActive ? "Enabled" : "Disabled",
            usersAssigned: "-", // adjust if backend provides
            lastModified: new Date(f.lastUpdated).toLocaleDateString(),
          }))
        );
      } catch (err) {
        console.error("Error fetching features", err);
      }
    };

    fetchFeatures();
  }, [activeAppTab]);
  // ──────────────────────────────────────────────────────────

  const handleRowClick = (rowData: AppManagementRow) => {
    setDrawerData(rowData);
    setIsDrawerOpen(true);
  };

  const headCells = [
    { accessorKey: "app name", header: "App Name" },
    { accessorKey: "app id", header: "App ID" },
    {
      accessorKey: "status",
      header: "Status",
      Cell: ({ cell }) => (
        <Box
          component="span"
          sx={{
            backgroundColor: "#2BCBC11A",
            borderRadius: "20px",
            color: "#2BCBC1",
            p: "0.25rem 0.5rem",
          }}
        >
         {cell.getValue()}
        </Box>
      ),
    },
    { accessorKey: "number of features", header: "Total Features" },
    { accessorKey: "number of actions", header: "Total User Actions" },
    { accessorKey: "last modified", header: "Last Modified" },
  ];

  const onChangeTab = (key: string) => {
    setActiveAppTab(key);
  };

  const renderAppManagement = () => (
    <div>
      {/* filter section */}
      <div className={styles.filterSection}>
        <Grid container alignItems="center" spacing={2}>
          <Grid item xs={2}>
            <TextField
              fullWidth
              size="small"
              placeholder="Type here"
              InputProps={{
                sx: { "&::placeholder": { color: "#CBCBCB", opacity: 0.7 }, color: "white" },
              }}
              sx={{ width: "160px", height: "36px", backgroundColor: "#1E252D", borderRadius: "4px" }}
            />
          </Grid>
          <Grid item xs={2}>
            <Select
              fullWidth
              size="small"
              sx={{
                width: "160px",
                height: "36px",
                backgroundColor: "#1E252D",
                color: "white",
                borderRadius: "4px",
              }}
            />
          </Grid>
          <Grid item xs={3}>
            <TextField
              fullWidth
              size="small"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
              label="Start Date → End Date"
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton onClick={() => alert("Open calendar picker")}>
                      <CalendarTodayIcon sx={{ color: "#FFF" }} />
                    </IconButton>
                  </InputAdornment>
                ),
                sx: { color: "white" },
              }}
              sx={{ backgroundColor: "#1E252D", borderRadius: "4px" }}
            />
          </Grid>
          <Grid item xs={2}>
            <Button
              variant="contained"
              size="small"
              sx={{ backgroundColor: "#2C3F5E", color: "white", width: "100px", height: "36px" }}
            >
              Search
            </Button>
          </Grid>
        </Grid>
      </div>

      {/* table section */}
      <div className={styles.tableSection}>
        <Box sx={{ border: "1px solid #444", padding: 2, borderRadius: "6px", mt: 2, backgroundColor: "#1A2028" }}>
          <MaterialTable
            tableRows={tabRow}
            tableCols={headCells}
            totalRowCount={rowCount}
            globalSearch={false}
            onRowClick={handleRowClick}
          />

          <Drawer
            anchor="right"
            open={isDrawerOpen}
            onClose={() => setIsDrawerOpen(false)}
            sx={{ "& .MuiDrawer-paper": { width: 500, backgroundColor: "#1A2028", padding: 2 } }}
          >
            {drawerData ? (
              <>
                <Typography variant="h6" sx={{ color: "white" }}>
                  {drawerData["app name"]}
                </Typography>
                <Grid container spacing={1} sx={{ mt: 2 }}>
                  <Grid item xs={3} sx={{ backgroundColor: "#FFFFFF0D", p: 1 }}>
                    ID: {drawerData["app id"]}
                  </Grid>
                  <Grid item xs={3} sx={{ backgroundColor: "#FFFFFF0D", p: 1 }}>
                    {drawerData["number of features"]} Features
                  </Grid>
                  <Grid item xs={3} sx={{ backgroundColor: "#FFFFFF0D", p: 1 }}>
                    {drawerData["number of actions"]} Actions
                  </Grid>
                  <Grid item xs={3} sx={{ backgroundColor: "#FFFFFF0D", p: 1 }}>
                    {drawerData.status}
                  </Grid>
                </Grid>
                <Box sx={{ mt: 2 }}>
                  <Typography sx={{ color: "white", mb: 1 }}>Description</Typography>
                  <Box sx={{ backgroundColor: "#FFFFFF0D", p: 2, borderRadius: 1, color: "white" }}>
                    {drawerData.appDesc}
                  </Box>
                </Box>
              </>
            ) : (
              <Typography>No Record</Typography>
            )}
          </Drawer>
        </Box>
      </div>
    </div>
  );

  const renderAppFeature = () => (
    <Box
      sx={{
        border: "1px solid #444",
        p: 2,
        borderRadius: "6px",
        backgroundColor: "#1A2028",
        mt: 2,
      }}
    >
      <Typography variant="h6" sx={{ color: "white" }}>
        Features
      </Typography>
      <MaterialTable
        tableRows={featuresData}
        globalSearch={false}
        tableCols={[
          { accessorKey: "name", header: "Feature Name" },
          { accessorKey: "featureId", header: "Feature ID" },
          { accessorKey: "status", header: "Status" },
          { accessorKey: "usersAssigned", header: "Users Assigned" },
          { accessorKey: "lastModified", header: "Last Modified" },
        ]}
      />
    </Box>
  );

  const renderAppAction = () => (
    <div>
      {tabRow.map((app) => (
        <Box
          key={app["app id"]}
          sx={{ border: "1px solid #444", p: 2, borderRadius: "6px", backgroundColor: "#1A2028", mt: 2 }}
        >
          <Typography variant="h6" sx={{ color: "white" }}>
            {app["app id"]} - {app["app name"]}
          </Typography>
          <Box sx={{ mt: 1 }}>
            <MaterialTable
              tableRows={app.actions || []}
              globalSearch={false}
              tableCols={[
                { accessorKey: "name", header: "Action Name" },
                { accessorKey: "actionId", header: "Action ID" },
                { accessorKey: "status", header: "Status" },
                { accessorKey: "usersAssigned", header: "Users Assigned" },
                { accessorKey: "lastModified", header: "Last Modified" },
              ]}
            />
          </Box>
        </Box>
      ))}
    </div>
  );

  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const handleMenuOpen = (event: React.MouseEvent<HTMLButtonElement>) =>
    setAnchorEl(event.currentTarget);
  const handleMenuClose = (option?: string) => {
    setAnchorEl(null);
    if (option && onNavigate) onNavigate(option);
  };

  return (
    <div className={styles.container}>
      {/* Header Section */}
      <div className={styles.header}>
        <div className={styles.left}>
          <Typography fontFamily="Poppins" sx={{ fontWeight: 500, fontSize: 20, color: "white" }}>
            Application Management
          </Typography>
          <div className={styles.tabsContainer}>
            <Tabs activeKey={activeAppTab} onChange={onChangeTab}>
              <TabPane
                tab={
                  <span style={{ fontWeight: 600, color: activeAppTab === "1" ? "#007BFF" : "#8D8D8D" }}>
                    Applications
                  </span>
                }
                key="1"
              />
              <TabPane
                tab={
                  <span style={{ fontWeight: 600, color: activeAppTab === "2" ? "#007BFF" : "#8D8D8D" }}>
                    Features
                  </span>
                }
                key="2"
              />
              <TabPane
                tab={
                  <span style={{ fontWeight: 600, color: activeAppTab === "3" ? "#007BFF" : "#8D8D8D" }}>
                    Actions
                  </span>
                }
                key="3"
              />
            </Tabs>
          </div>
        </div>

        {/* Buttons on the Right */}
        <div className={styles.right}>
          <Button
            variant="outlined"
            startIcon={<FolderIcon />}
            sx={{ borderColor: "white", height: 41, fontWeight: 600, fontSize: 12, color: "white" }}
          >
            My Apps
          </Button>
          <Button
            variant="contained"
            startIcon={<AddCircleIcon />}
            onClick={handleMenuOpen}
            sx={{ height: 41, fontWeight: 600, fontSize: 12, ml: 2 }}
          >
            Add New
          </Button>
          <Menu
            anchorEl={anchorEl}
            open={Boolean(anchorEl)}
            onClose={() => handleMenuClose()}
            sx={{ "& .MuiMenu-paper": { backgroundColor: "#1A2028", color: "white" } }}
          >
            <MenuItem onClick={() => handleMenuClose("add-app")}>Applications</MenuItem>
            <MenuItem onClick={() => handleMenuClose("add-feature")}>Feature</MenuItem>
            <MenuItem onClick={() => handleMenuClose("add-action")}>User Action</MenuItem>
          </Menu>
        </div>
      </div>

      {/* Content Section */}
      <div className={styles.content}>
        {activeAppTab === "1" && renderAppManagement()}
        {activeAppTab === "2" && renderAppFeature()}
        {activeAppTab === "3" && renderAppAction()}
      </div>
    </div>
  );
};

export default AppManagementview;
