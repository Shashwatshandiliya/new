import * as React from "react";
import Grid from "@mui/material/Grid";
import IconButton from "@mui/material/IconButton";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import MaterialTable from "../../../Root/components/MaterialTable";
import { InputAdornment, Select, TextField, Typography } from "@mui/material";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import FolderIcon from '@mui/icons-material/Folder';
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import { Tabs } from "antd";
import Drawer from "@mui/material/Drawer";
import styles from "./AppManagement.module.css";
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import Menu from "@mui/material/Menu";
import MenuItem from "@mui/material/MenuItem";
import axios from "axios";

const { TabPane } = Tabs;

interface AppManagementProps {
  onNavigate?: (tab: string) => void;
}

interface AppManagementRow {
  "app name": string;
  "app id": string;
  status: string;
  "appDesc": string;
  "number of features": string;
  "number of actions": string;
  "last modified": string;
  features?: { name: string; featureId: string; status: string; usersAssigned: string; lastModified: string }[];
  actions?: { name: string; actionId: string; status: string; usersAssigned: string; lastModified: string }[];
}

const AppManagementview: React.FC<AppManagementProps> = ({ onNavigate }) => {
  const [activeAppTab, setActiveAppTab] = React.useState("1");
  const [tabRow, setTabRow] = React.useState<AppManagementRow[]>([]);
  const [rowCount, setRowCount] = React.useState(0);
  const [selectedDate, setSelectedDate] = React.useState("");
  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);
  const [drawerData, setDrawerData] = React.useState<AppManagementRow | null>(null);

  // ─── featuresData now includes applicationId to group by app
  const [featuresData, setFeaturesData] = React.useState<{
    name: string;
    featureId: string;
    status: string;
    usersAssigned: string;
    lastModified: string;
    applicationId: string;
  }[]>([]);
  // ───────────────────────────────────────────────

  React.useEffect(() => {
    const fetchApplications = async (): Promise<void> => {
      try {
        const response = await axios.get(
          'http://uklvauems02a.uk.standardchartered.com:8083/fmces/v1/applicationsWithCountOfFeaturesAndActions'
        );
        const data = response.data.map((item: any) => ({
          "app name": item.appName,
          "app id": String(item.appID),
          "appDesc": item.appDesc,
          "number of features": String(item.totalNumberOfFeatures),
          "number of actions": String(item.totalNumberOfActions),
          status: item.status,
          "last modified": new Date(item.lastUpdated).toLocaleDateString(),
          features: item.features,
          actions: item.actions,
        }));
        setTabRow(data);
        setRowCount(data.length);
      } catch (error) {
        console.error('Error fetching applications', error);
      }
    };
    fetchApplications();
  }, []);

  React.useEffect(() => {
    if (activeAppTab !== "2") return;
    const fetchFeatures = async () => {
      try {
        const resp = await axios.get(
          'http://uklvauems02a.uk.standardchartered.com:8083/fmces/v1/features'
        );
        setFeaturesData(
          resp.data.map((f: any) => ({
            name: f.featureName,
            featureId: String(f.featureId),
            status: f.application.isActive ? "Enabled" : "Disabled",
            usersAssigned: "-", // no count field
            lastModified: new Date(f.lastUpdated).toLocaleDateString(),
            applicationId: String(f.application.appID),
          }))
        );
      } catch (err) {
        console.error('Error fetching features', err);
      }
    };
    fetchFeatures();
  }, [activeAppTab]);

  const handleRowClick = (rowData: AppManagementRow) => {
    setDrawerData(rowData);
    setIsDrawerOpen(true);
  };

  const headCells = [
    { accessorKey: "app name", header: "App Name" },
    { accessorKey: "app id", header: "App ID" },
    {
      accessorKey: "status",
      header: "Status",
      Cell: ({ cell }: any) => (
        <Box component="span" sx={{ backgroundColor: "#2BCBC11A", borderRadius: "20px", color: "#2BCBC1", p: "0.25rem 0.5rem" }}>
          {cell.getValue()}
        </Box>
      ),
    },
    { accessorKey: "number of features", header: "Total Features" },
    { accessorKey: "number of actions", header: "Total User Actions" },
    { accessorKey: "last modified", header: "Last Modified" },
  ];

  const onChangeTab = (key: string) => setActiveAppTab(key);

  const renderAppManagement = () => (
    <>
      {/* filter section (unchanged) */}
      {/* ... your existing filter markup ... */}
      {/* table */}
      <MaterialTable
        tableRows={tabRow}
        tableCols={headCells}
        totalRowCount={rowCount}
        globalSearch={false}
        onRowClick={handleRowClick}
      />
      {/* drawer unchanged */}
    </>
  );

  const renderAppFeature = () => (
    <div>
      {tabRow.map((app) => {
        const rows = featuresData.filter((f) => f.applicationId === app['app id']);
        return (
          <Box key={app['app id']} sx={{ border: '1px solid #444', p: 2, borderRadius: 1, backgroundColor: '#1A2028', mt: 2 }}>
            <Typography variant="h6" sx={{ color: 'white' }}>
              {app['app id']} - {app['app name']}
            </Typography>
            <Box sx={{ mt: 1 }}>
              <MaterialTable
                tableRows={rows}
                globalSearch={false}
                tableCols={[
                  { accessorKey: 'name', header: 'Feature Name' },
                  { accessorKey: 'featureId', header: 'Feature ID' },
                  { accessorKey: 'status', header: 'Status' },
                  { accessorKey: 'usersAssigned', header: 'Users Assigned' },
                  { accessorKey: 'lastModified', header: 'Last Modified' },
                ]}
              />
            </Box>
          </Box>
        );
      })}
    </div>
  );

  const renderAppAction = () => (
    <div>
      {tabRow.map((app) => (
        <Box key={app['app id']} sx={{ border: '1px solid #444', p: 2, borderRadius: 1, backgroundColor: '#1A2028', mt: 2 }}>
          <Typography variant="h6" sx={{ color: 'white' }}>
            {app['app id']} - {app['app name']}
          </Typography>
          <Box sx={{ mt: 1 }}>
            <MaterialTable
              tableRows={app.actions || []}
              globalSearch={false}
              tableCols={[
                { accessorKey: 'name', header: 'Action Name' },
                { accessorKey: 'actionId', header: 'Action ID' },
                { accessorKey: 'status', header: 'Status' },
                { accessorKey: 'usersAssigned', header: 'Users Assigned' },
                { accessorKey: 'lastModified', header: 'Last Modified' },
              ]}
            />
          </Box>
        </Box>
      ))}
    </div>
  );

  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const handleMenuOpen = (event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget);
  const handleMenuClose = (option?: string) => {
    setAnchorEl(null);
    if (option && onNavigate) onNavigate(option);
  };

  return (
    <div className={styles.container}>
      {/* header & tabs unchanged */}
      <div className={styles.content}>
        {activeAppTab === "1" && renderAppManagement()}
        {activeAppTab === "2" && renderAppFeature()}
        {activeAppTab === "3" && renderAppAction()}
      </div>
    </div>
  );
};

export default AppManagementview;
