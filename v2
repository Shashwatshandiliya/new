import * as React from "react";
import Grid from "@mui/material/Grid";
import IconButton from "@mui/material/IconButton";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import MaterialTable from "../../../Root/components/MaterialTable";
import { InputAdornment, Select, TextField, Typography } from "@mui/material";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import FolderIcon from '@mui/icons-material/Folder';
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import { Tabs } from "antd";
import Drawer from "@mui/material/Drawer";
import styles from "./AppManagement.module.css";
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import Menu from "@mui/material/Menu";
import MenuItem from "@mui/material/MenuItem";
import axios from "axios";

const { TabPane } = Tabs;

interface AppManagementProps {
  onNavigate?: (tab: string) => void;
}

interface AppManagementRow {
  "app name": string;
  "app id": string;
  "appUID": string;
  status: string;
  "appDesc": string;
  "number of features": string;
  "number of actions": string;
  "last modified": string;
  features: { name: string; featureId: string; status: string; usersAssigned: string; lastModified: string }[];
  actions: { name: string; actionId: string; status: string; usersAssigned: string; lastModified: string }[];
}

const AppManagementview: React.FC<AppManagementProps> = ({ onNavigate }) => {
  const [activeAppTab, setActiveAppTab] = React.useState<string>("1");
  const [tabRow, setTabRow] = React.useState<AppManagementRow[]>([]);
  const [rowCount, setRowCount] = React.useState<number>(0);
  const [selectedDate, setSelectedDate] = React.useState<string>("");
  const [isDrawerOpen, setIsDrawerOpen] = React.useState<boolean>(false);
  const [drawerData, setDrawerData] = React.useState<AppManagementRow | null>(null);
  const [featuresData, setFeaturesData] = React.useState<Array<{
    name: string;
    featureId: string;
    status: string;
    usersAssigned: string;
    lastModified: string;
    applicationUID: string;
  }>>([]);

  // Fetch applications
  React.useEffect(() => {
    const fetchApplications = async () => {
      try {
        const response = await axios.get(
          'http://uklvauems02a.uk.standardchartered.com:8083/fmces/v1/applicationsWithCountOfFeaturesAndActions'
        );
        const apps = response.data.map((item: any) => ({
          "app name": item.appName,
          "app id": String(item.appID),
          "appUID": String(item.appUID),
          "appDesc": item.appDesc,
          "number of features": String(item.totalNumberOfFeatures),
          "number of actions": String(item.totalNumberOfActions),
          status: item.isActive ? "Enabled" : "Disabled",
          "last modified": new Date(item.lastUpdated).toLocaleDateString(),
          features: item.features,
          actions: item.actions,
        }));
        setTabRow(apps);
        setRowCount(apps.length);
      } catch (error) {
        console.error('Error fetching applications', error);
      }
    };
    fetchApplications();
  }, []);

  // Fetch features
  React.useEffect(() => {
    if (activeAppTab !== "2") return;
    const fetchFeatures = async () => {
      try {
        const resp = await axios.get(
          'http://uklvauems02a.uk.standardchartered.com:8083/fmces/v1/features'
        );
        const feats = resp.data.map((f: any) => ({
          name: f.featureName,
          featureId: String(f.featureId),
          status: f.application.isActive ? 'Enabled' : 'Disabled',
          usersAssigned: '-',
          lastModified: new Date(f.lastUpdated).toLocaleDateString(),
          applicationUID: String(f.application.appUID),
        }));
        setFeaturesData(feats);
      } catch (err) {
        console.error('Error fetching features', err);
      }
    };
    fetchFeatures();
  }, [activeAppTab]);

  const handleRowClick = (rowData: AppManagementRow) => {
    setDrawerData(rowData);
    setIsDrawerOpen(true);
  };

  const headCells = [
    { accessorKey: 'app name', header: 'App Name' },
    { accessorKey: 'app id', header: 'App ID' },
    {
      accessorKey: 'status', header: 'Status',
      Cell: ({ cell }: any) => (
        <Box component="span" sx={{ 
          backgroundColor: cell.getValue() === 'Enabled' ? '#2BCBC11A' : '#ff00001A', 
          borderRadius: '20px', 
          color: cell.getValue() === 'Enabled' ? '#2BCBC1' : '#ff0000', 
          p: '0.25rem 0.5rem' 
        }}>
          {cell.getValue()}
        </Box>
      )
    },
    { accessorKey: 'number of features', header: 'Total Features' },
    { accessorKey: 'number of actions',  header: 'Total User Actions' },
    { accessorKey: 'last modified',      header: 'Last Modified' },
  ];

  const onChangeTab = (key: string) => setActiveAppTab(key);

  const renderAppManagement = () => (
    <>
      <div className={styles.filterSection}>
        {/* Filter controls remain same */}
      </div>
      <div className={styles.tableSection}>
        <Box sx={{ border: '1px solid #444', p: 2, borderRadius: 1, mt: 2, backgroundColor: '#1A2028' }}>
          <MaterialTable tableRows={tabRow} tableCols={headCells} totalRowCount={rowCount} globalSearch={false} onRowClick={handleRowClick} />
          {/* Drawer remains same */}
        </Box>
      </div>
    </>
  );

  const renderAppFeature = () => (
    <div>
      {tabRow
        .filter(app => parseInt(app["number of features"]) > 0)
        .map(app => {
          const rows = featuresData.filter(f => f.applicationUID === app.appUID);
          return (
            <Box key={app.appUID} sx={{ border: '1px solid #444', p: 2, borderRadius: 1, backgroundColor: '#1A2028', mt: 2 }}>
              <Typography variant="h6" sx={{ color: 'white' }}>{`${app["app id"]} - ${app["app name"]}`}</Typography>
              <Box sx={{ mt: 1 }}>
                <MaterialTable
                  tableRows={rows}
                  globalSearch={false}
                  tableCols={[
                    { accessorKey: 'name', header: 'Feature Name' },
                    { accessorKey: 'featureId', header: 'Feature ID' },
                    {
                      accessorKey: 'status', 
                      header: 'Status',
                      Cell: ({ cell }: any) => (
                        <Box component="span" sx={{ 
                          backgroundColor: cell.getValue() === 'Enabled' ? '#2BCBC11A' : '#ff00001A', 
                          borderRadius: '20px', 
                          color: cell.getValue() === 'Enabled' ? '#2BCBC1' : '#ff0000', 
                          p: '0.25rem 0.5rem' 
                        }}>
                          {cell.getValue()}
                        </Box>
                      )
                    },
                    { accessorKey: 'usersAssigned', header: 'Users Assigned' },
                    { accessorKey: 'lastModified', header: 'Last Modified' },
                  ]}
                />
              </Box>
            </Box>
          );
        })}
    </div>
  );

  const renderAppAction = () => (
    <div>
      {tabRow.map(app => (
        <Box key={app.appUID} sx={{ border: '1px solid #444', p: 2, borderRadius: 1, backgroundColor: '#1A2028', mt: 2 }}>
          <Typography variant="h6" sx={{ color: 'white' }}>{`${app["app id"]} - ${app["app name"]}`}</Typography>
          <Box sx={{ mt: 1 }}>
            <MaterialTable
              tableRows={app.actions || []}
              globalSearch={false}
              tableCols={[
                { accessorKey: 'name', header: 'Action Name' },
                { accessorKey: 'actionId', header: 'Action ID' },
                { accessorKey: 'status', header: 'Status' },
                { accessorKey: 'usersAssigned', header: 'Users Assigned' },
                { accessorKey: 'lastModified', header: 'Last Modified' },
              ]}
            />
          </Box>
        </Box>
      ))}
    </div>
  );

  // Rest of the component remains same
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);
  const handleMenuOpen = (e: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(e.currentTarget);
  const handleMenuClose = (opt?: string) => { setAnchorEl(null); if(opt && onNavigate) onNavigate(opt); };

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        {/* Header UI remains same */}
      </div>
      <div className={styles.content}>
        {activeAppTab==='1' && renderAppManagement()}
        {activeAppTab==='2' && renderAppFeature()}
        {activeAppTab==='3' && renderAppAction()}
      </div>
    </div>
  );
};

export default AppManagementview;
