// EntitlementUserView.tsx
import React, { useState } from "react";
import { Typography, Grid, TextField, InputAdornment, Button, Drawer, Box, IconButton } from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import styles from "./EntitlementUserView.module.css";
import MaterialTable from "../../components/MaterialTable";

const dummyAccounts = [
  { id: 1, bankId: "111111", accountOwner: "2222222", roles: ["Maker"], status: "Active", accountType: "User", createdDate: "2023-10-01" },
  { id: 2, bankId: "222222", accountOwner: "3333333", roles: ["Maker", "Checker"], status: "Inactive", accountType: "Admin", createdDate: "2023-10-05" },
  { id: 3, bankId: "333333", accountOwner: "4444444", roles: ["Maker"], status: "Active", accountType: "User", createdDate: "2023-11-01" },
  { id: 4, bankId: "444444", accountOwner: "5555555", roles: ["Checker"], status: "Inactive", accountType: "Viewer", createdDate: "2023-11-15" },
  { id: 5, bankId: "555555", accountOwner: "6666666", roles: ["Maker"], status: "Active", accountType: "User", createdDate: "2023-12-01" }
];

const dummyEntitlements = [
  { id: 1, name: "Admin", description: "Admin access", createdDate: "2023-10-01" },
  { id: 2, name: "Maker", description: "Can initiate actions", createdDate: "2023-10-02" },
  { id: 3, name: "Checker", description: "Can approve actions", createdDate: "2023-10-03" },
  { id: 4, name: "Viewer", description: "Read-only access", createdDate: "2023-10-04" },
  { id: 5, name: "Editor", description: "Can modify content", createdDate: "2023-10-05" }
];

const EntitlementUserView: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [drawerData, setDrawerData] = useState<any | null>(null);

  const headCellsAccounts = [
    { accessorKey: "bankId", header: "Bank ID" },
    { accessorKey: "accountOwner", header: "Account Owner" },
    { accessorKey: "roles", header: "Roles" },
    { accessorKey: "status", header: "Status" },
    { accessorKey: "accountType", header: "Account Type" },
    { accessorKey: "createdDate", header: "Created Date" }
  ];

  const headCellsEntitlements = [
    { accessorKey: "name", header: "Name" },
    { accessorKey: "description", header: "Description" },
    { accessorKey: "createdDate", header: "Created Date" }
  ];

  const filteredAccounts = dummyAccounts.filter(acc => acc.bankId.includes(searchTerm));
  const filteredEntitlements = dummyEntitlements.filter(ent => ent.name.toLowerCase().includes(searchTerm.toLowerCase()));

  const openDrawer = (data: any) => {
    setDrawerData(data);
    setDrawerOpen(true);
  };

  return (
    <div className={styles.container}>
      <Typography fontFamily="Poppins" sx={{ fontWeight: 500, fontSize: 20, color: 'white' }}>
        Entitlement Users
      </Typography>

      {/* Accounts Section */}
      <div className={styles.section}>
        <div className={styles.sectionHeader}>
          <Typography className={styles.sectionTitle}>Accounts</Typography>
          <div className={styles.underline} />
        </div>

        <Grid container alignItems="center" spacing={2} className={styles.filterSection}>
          <Grid item xs={12} md={4} lg={3}>
            <TextField
              placeholder="Search accounts"
              size="small"
              fullWidth
              value={searchTerm}
              onChange={e => setSearchTerm(e.target.value)}
              sx={{
                '& .MuiInputBase-root': { height: 40 },
                backgroundColor: '#1E252D',
                borderRadius: 1
              }}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon sx={{ color: '#CBCBCB' }} />
                  </InputAdornment>
                ),
              }}
            />
          </Grid>
          <Grid item xs={3} md={2} lg={1}>
            <Button variant="outlined" size="small" sx={{ color: 'white', borderColor: 'white', height: 40, width: '100%' }}>
              Search
            </Button>
          </Grid>
          <Grid item xs={9} md={6} lg={8} textAlign="right">
            <Button variant="contained" startIcon={<AddCircleIcon />} sx={{ height: 40, fontWeight: 600, fontSize: 12 }}>
              Create Account
            </Button>
          </Grid>
        </Grid>

        <MaterialTable
          tableRows={filteredAccounts}
          tableCols={headCellsAccounts}
          totalRowCount={filteredAccounts.length}
          globalSearch={false}
          onRowClick={row => openDrawer(row)}
        />
      </div>

      {/* Entitlements Section */}
      <div className={styles.section}>
        <div className={styles.sectionHeader}>
          <Typography className={styles.sectionTitle}>Entitlements</Typography>
          <div className={styles.underline} />
        </div>

        <Grid container alignItems="center" spacing={2} className={styles.filterSection}>
          <Grid item xs={12} md={4} lg={3}>
            <TextField
              placeholder="Search entitlements"
              size="small"
              fullWidth
              value={searchTerm}
              onChange={e => setSearchTerm(e.target.value)}
              sx={{
                '& .MuiInputBase-root': { height: 40 },
                backgroundColor: '#1E252D',
                borderRadius: 1
              }}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon sx={{ color: '#CBCBCB' }} />
                  </InputAdornment>
                ),
              }}
            />
          </Grid>
          <Grid item xs={3} md={2} lg={1}>
            <Button variant="outlined" size="small" sx={{ color: 'white', borderColor: 'white', height: 40, width: '100%' }}>
              Search
            </Button>
          </Grid>
          <Grid item xs={9} md={6} lg={8} textAlign="right">
            <Button variant="contained" startIcon={<AddCircleIcon />} sx={{ height: 40, fontWeight: 600, fontSize: 12 }}>
              Create Entitlement
            </Button>
          </Grid>
        </Grid>

        <MaterialTable
          tableRows={filteredEntitlements}
          tableCols={headCellsEntitlements}
          totalRowCount={filteredEntitlements.length}
          globalSearch={false}
          onRowClick={row => openDrawer(row)}
        />
      </div>

      <Drawer
        anchor="right"
        open={drawerOpen}
        onClose={() => setDrawerOpen(false)}
        sx={{ '& .MuiDrawer-paper': { width: 500, backgroundColor: '#1A2028', p: 2 } }}
      >
        {drawerData ? (
          <>
            <div className={styles.drawerHeader}>
              <Typography variant="h6" sx={{ color: 'white' }}>
                {'name' in drawerData ? drawerData.name : drawerData.bankId}
              </Typography>
              <IconButton onClick={() => setDrawerOpen(false)} sx={{ color: 'white' }}>
                <DeleteIcon />
              </IconButton>
            </div>
            <Grid container spacing={1} sx={{ mt: 1 }}>
              {Object.entries(drawerData).map(([k, v]) => (
                <Grid key={k} item xs={12} sx={{ backgroundColor: '#FFFFFF0D', p: 1 }}>
                  <Typography variant="body2" sx={{ color: 'white' }}>
                    {`${k.charAt(0).toUpperCase() + k.slice(1)}: ${Array.isArray(v) ? v.join(', ') : v}`}
                  </Typography>
                </Grid>
              ))}
            </Grid>
            <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
              <Button variant="outlined" startIcon={<DeleteIcon />} sx={{ color: 'white', borderColor: 'white' }}>
                Delete
              </Button>
              <Button variant="contained" startIcon={<EditIcon />}>
                Edit
              </Button>
            </Box>
          </>
        ) : (
          <Typography sx={{ color: 'white' }}>No record selected</Typography>
        )}
      </Drawer>
    </div>
  );
};

export default EntitlementUserView;
