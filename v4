// Update the EntitlementRow interface
interface FeatureAction {
  feature: string;
  action: string;
}

interface EntitlementRow {
  name: string;
  ID: string;
  description: string;
  application: string;
  isActive: boolean;
  lastModified: string;
  policies: string[];
  dataProfiles: string[];
  featureActions: FeatureAction[]; // Add this line
}

// Update the API response mapping in fetchEntitlements
const fetchEntitlements = async () => {
  try {
    const resp = await axios.get<EntitlementAPI[]>(
      'http://uklvauems02a.uk.standardchartered.com:32441/fmces/v1/allentitlements'
    );
    const rows = resp.data.map(item => ({
      name: item.entitlementName,
      ID: item.entitlementId.toString(),
      description: item.description,
      application: item.application.appName,
      isActive: item.isActive,
      lastModified: new Date(item.lastUpdated).toLocaleDateString(),
      policies: item.entitlementPolicyList.map(p => p.policy.policyName),
      dataProfiles: item.entitlementProfileList.map(p => p.profile.profileName),
      featureActions: item.entitlementFeatureActionList.map(fa => ({
        feature: fa.feature.featureName,
        action: fa.action.actionName
      }))
    }));
    setTabRow(rows);
    setRowCount(rows.length);
  } catch (error) {
    console.error('Error fetching entitlements', error);
  }
};

// Update the Features & Actions tab rendering
{selectedTab === 1 && (
  <Box sx={{ mt: 2 }}>
    <Box sx={{ 
      backgroundColor: '#FFFFFF0D', 
      borderRadius: 1,
      overflow: 'hidden'
    }}>
      <Box sx={{
        display: 'grid',
        gridTemplateColumns: '1fr 2fr',
        borderBottom: '1px solid #2C3F5E',
        backgroundColor: '#262B36',
        px: 2,
        py: 1
      }}>
        <Typography variant="subtitle2" sx={{ color: '#2BCBC1' }}>Feature</Typography>
        <Typography variant="subtitle2" sx={{ color: '#2BCBC1' }}>Actions</Typography>
      </Box>

      {drawerData.featureActions.map((fa, index) => (
        <Box 
          key={index}
          sx={{
            display: 'grid',
            gridTemplateColumns: '1fr 2fr',
            borderBottom: index < drawerData.featureActions.length - 1 ? '1px solid #2C3F5E' : 'none',
            px: 2,
            py: 1.5
          }}
        >
          <Typography sx={{ color: 'white', fontWeight: 500 }}>{fa.feature}</Typography>
          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
            <Typography 
              sx={{ 
                color: 'white',
                '&:after': {
                  content: '","',
                  color: '#666',
                  marginRight: '4px'
                },
                '&:last-child:after': {
                  content: 'none'
                }
              }}
            >
              {fa.action}
            </Typography>
          </Box>
        </Box>
      ))}
    </Box>
  </Box>
)}
