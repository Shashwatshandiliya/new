import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import AppManagementview from './AppManagementview';
import axios from 'axios';
import '@testing-library/jest-dom';

jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;

const mockAppsData = [
  {
    appName: 'Test App',
    appID: 1,
    appUID: '123',
    appDesc: 'Test Description',
    totalNumberOfFeatures: 2,
    totalNumberOfActions: 3,
    isActive: true,
    lastUpdated: '2023-01-01',
    features: [],
    actions: []
  }
];

const mockFeaturesData = [
  {
    featureName: 'Test Feature',
    featureId: 1,
    description: 'Feature Desc',
    lastUpdated: '2023-01-01',
    application: { appUID: '123' }
  }
];

const mockActionsData = [
  {
    actionName: 'Test Action',
    actionId: 1,
    actionDescription: 'Action Desc',
    lastUpdated: '2023-01-01',
    application: { appUID: '123' }
  }
];

describe('AppManagementview', () => {
  const mockProps = {
    onNavigate: jest.fn(),
    onEditApp: jest.fn(),
    onDeleteApp: jest.fn(),
    onEditFeature: jest.fn(),
    onDeleteFeature: jest.fn(),
    onEditAction: jest.fn(),
    onDeleteAction: jest.fn()
  };

  beforeEach(() => {
    mockedAxios.get.mockImplementation((url) => {
      if (url.includes('applicationsWithCountOfFeaturesAndActions')) {
        return Promise.resolve({ data: mockAppsData });
      }
      if (url.includes('features')) {
        return Promise.resolve({ data: mockFeaturesData });
      }
      if (url.includes('actions')) {
        return Promise.resolve({ data: mockActionsData });
      }
      return Promise.reject(new Error('not found'));
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders initial Applications tab correctly', async () => {
    render(<AppManagementview {...mockProps} />);
    
    expect(await screen.findByText('Application Management')).toBeInTheDocument();
    expect(screen.getByText('Applications')).toHaveStyle('color: #007BFF');
    expect(screen.getByRole('button', { name: 'Add New' })).toBeInTheDocument();
  });

  test('switches between tabs correctly', async () => {
    render(<AppManagementview {...mockProps} />);
    
    fireEvent.click(screen.getByText('Features'));
    await waitFor(() => {
      expect(screen.getByText('Features')).toHaveStyle('color: #007BFF');
      expect(axios.get).toHaveBeenCalledWith(expect.stringContaining('features'));
    });

    fireEvent.click(screen.getByText('Actions'));
    await waitFor(() => {
      expect(screen.getByText('Actions')).toHaveStyle('color: #007BFF');
      expect(axios.get).toHaveBeenCalledWith(expect.stringContaining('actions'));
    });
  });

  test('displays applications data correctly', async () => {
    render(<AppManagementview {...mockProps} />);
    
    await waitFor(() => {
      expect(screen.getByText('Test App')).toBeInTheDocument();
      expect(screen.getByText('Enabled')).toBeInTheDocument();
      expect(screen.getByText('2 Features')).toBeInTheDocument();
    });
  });

  test('opens drawer with app details on row click', async () => {
    render(<AppManagementview {...mockProps} />);
    
    const row = await screen.findByText('Test App');
    fireEvent.click(row);

    await waitFor(() => {
      expect(screen.getByText('Test Description')).toBeInTheDocument();
      expect(screen.getByRole('button', { name: 'Edit' })).toBeInTheDocument();
      expect(screen.getByRole('button', { name: 'Delete' })).toBeInTheDocument();
    });
  });

  test('triggers delete app callback correctly', async () => {
    render(<AppManagementview {...mockProps} />);
    
    const row = await screen.findByText('Test App');
    fireEvent.click(row);
    fireEvent.click(await screen.findByRole('button', { name: 'Delete' }));

    await waitFor(() => {
      expect(mockProps.onDeleteApp).toHaveBeenCalledWith('1');
    });
  });

  test('shows features grouped by application', async () => {
    render(<AppManagementview {...mockProps} />);
    
    fireEvent.click(screen.getByText('Features'));
    await waitFor(() => {
      expect(screen.getByText('123 - Test App')).toBeInTheDocument();
      expect(screen.getByText('Test Feature')).toBeInTheDocument();
    });
  });

  test('handles add new menu interactions', async () => {
    render(<AppManagementview {...mockProps} />);
    
    fireEvent.click(screen.getByRole('button', { name: 'Add New' }));
    fireEvent.click(screen.getByText('Feature'));

    await waitFor(() => {
      expect(mockProps.onNavigate).toHaveBeenCalledWith('add-feature');
    });
  });

  test('displays error state when API fails', async () => {
    mockedAxios.get.mockRejectedValue(new Error('API Error'));
    render(<AppManagementview {...mockProps} />);
    
    await waitFor(() => {
      expect(screen.getByText(/error fetching applications/i)).toBeInTheDocument();
    });
  });
});
