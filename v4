import React from 'react';
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';
import CreateNewApp from './CreateNewApp';
import { ToastContainer } from 'react-toastify';
import '@testing-library/jest-dom';
import * as Service from '../../../Root/import';

jest.mock('../../../Root/import', () => ({
  Service: {
    postService: jest.fn()
  }
}));

jest.useFakeTimers();

describe('CreateNewApp', () => {
  const mockOnBack = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders all form elements', () => {
    render(<CreateNewApp onBack={mockOnBack} />);
    
    expect(screen.getByLabelText('Application ID')).toBeInTheDocument();
    expect(screen.getByLabelText('ITAM Name')).toBeInTheDocument();
    expect(screen.getByLabelText('Application Name')).toBeInTheDocument();
    expect(screen.getByLabelText('Description')).toBeInTheDocument();
    expect(screen.getByLabelText('App Owner')).toBeInTheDocument();
    expect(screen.getByLabelText('Application Dev DL')).toBeInTheDocument();
    expect(screen.getByLabelText('Recurring Downtime')).toBeInTheDocument();
    expect(screen.getByLabelText('Downtime Start')).toBeInTheDocument();
    expect(screen.getByLabelText('Downtime End')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /submit/i })).toBeInTheDocument();
  });

  test('handles form input changes correctly', () => {
    render(<CreateNewApp onBack={mockOnBack} />);
    
    const appIdInput = screen.getByLabelText('Application ID');
    fireEvent.change(appIdInput, { target: { value: 'TEST123' } });
    expect(appIdInput).toHaveValue('TEST123');
  });

  test('shows validation errors on empty submit', async () => {
    render(
      <>
        <ToastContainer />
        <CreateNewApp onBack={mockOnBack} />
      </>
    );

    fireEvent.click(screen.getByRole('button', { name: /submit/i }));
    
    await waitFor(() => {
      expect(screen.getByText(/please fill all required fields/i)).toBeInTheDocument();
    });
  });

  // Fixed Tests Below

  test('handles back button click', () => {
    render(<CreateNewApp onBack={mockOnBack} />);
    
    const backButton = screen.getByRole('button', { name: /back/i });
    fireEvent.click(backButton);
    expect(mockOnBack).toHaveBeenCalled();
  });

  test('handles recurring downtime selection', async () => {
    render(<CreateNewApp onBack={mockOnBack} />);
    
    const select = screen.getByLabelText('Recurring Downtime');
    
    // Open dropdown
    fireEvent.mouseDown(select);
    
    // Select Yes option
    const yesOption = await screen.findByRole('option', { name: 'Yes' });
    fireEvent.click(yesOption);

    // Verify selection
    await waitFor(() => {
      expect(screen.getByText('Yes')).toBeInTheDocument();
      expect(screen.queryByText('No')).not.toBeInTheDocument();
    });
  });

  test('submits form successfully', async () => {
    (Service.postService as jest.Mock).mockResolvedValue({ status: 201 });
    
    const { getByLabelText } = render(
      <>
        <ToastContainer />
        <CreateNewApp onBack={mockOnBack} />
      </>
    );

    // Fill all required fields
    fireEvent.change(getByLabelText('Application ID'), { target: { value: 'TEST123' } });
    fireEvent.change(getByLabelText('ITAM Name'), { target: { value: 'ITAM1' } });
    fireEvent.change(getByLabelText('Application Name'), { target: { value: 'Test App' } });
    fireEvent.change(getByLabelText('Description'), { target: { value: 'Test Description' } });
    fireEvent.change(getByLabelText('App Owner'), { target: { value: 'Owner' } });
    fireEvent.change(getByLabelText('Application Dev DL'), { target: { value: 'dl@test.com' } });
    fireEvent.change(getByLabelText('Application Dev DL'), { 
      target: { name: 'pssDL', value: 'pss@test.com' } 
    });

    // Handle recurring downtime
    fireEvent.mouseDown(getByLabelText('Recurring Downtime'));
    fireEvent.click(screen.getByRole('option', { name: 'Yes' }));

    // Submit form
    fireEvent.click(screen.getByRole('button', { name: /submit/i }));

    await waitFor(() => {
      expect(Service.postService).toHaveBeenCalledWith(
        '/fmces/p80/v1/data-policy/create',
        expect.objectContaining({
          appID: 'TEST123',
          itamName: 'ITAM1',
          appName: 'Test App',
          isRecurringDowntime: true
        })
      );
    });

    // Check for success toast
    await waitFor(() => {
      expect(screen.getByText(/app created successfully/i)).toBeInTheDocument();
    });

    // Advance timers for the setTimeout
    act(() => {
      jest.advanceTimersByTime(1000);
    });

    // Verify navigation back
    expect(mockOnBack).toHaveBeenCalled();
  });

  test('handles form submission error', async () => {
    (Service.postService as jest.Mock).mockRejectedValue(new Error('API Error'));
    
    const { getByLabelText } = render(
      <>
        <ToastContainer />
        <CreateNewApp onBack={mockOnBack} />
      </>
    );

    // Fill required fields
    fireEvent.change(getByLabelText('Application ID'), { target: { value: 'TEST123' } });
    fireEvent.change(getByLabelText('ITAM Name'), { target: { value: 'ITAM1' } });
    fireEvent.change(getByLabelText('Application Name'), { target: { value: 'Test App' } });
    fireEvent.change(getByLabelText('Description'), { target: { value: 'Test Description' } });
    fireEvent.change(getByLabelText('App Owner'), { target: { value: 'Owner' } });
    fireEvent.change(getByLabelText('Application Dev DL'), { target: { value: 'dl@test.com' } });
    fireEvent.change(getByLabelText('Application Dev DL'), { 
      target: { name: 'pssDL', value: 'pss@test.com' } 
    });

    fireEvent.click(screen.getByRole('button', { name: /submit/i }));

    await waitFor(() => {
      expect(screen.getByText(/failed to create app/i)).toBeInTheDocument();
    });
  });
});
