import * as React from "react";
import Grid from "@mui/material/Grid";
import IconButton from "@mui/material/IconButton";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import Tabs from "@mui/material/Tabs";
import Tab from "@mui/material/Tab";
import MaterialTable from "../../../Root/components/MaterialTable";
import axios from "axios";
import {
  InputAdornment,
  TextField,
  Typography,
} from "@mui/material";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import Drawer from "@mui/material/Drawer";
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import styles from "./EntitlementView.module.css";

// Interfaces
interface Application {
  appName: string;
}

interface EntitlementAPI {
  entitlementId: number;
  entitlementName: string;
  description: string;
  application: Application;
  isActive: boolean;
  lastUpdated: string;
  entitlementPolicyList: Array<{
    policy: {
      policyName: string;
      policyId: number;
    }
  }>;
  entitlementProfileList: Array<{
    profile: {
      profileName: string;
      profileId: number;
    }
  }>;
}

interface EntitlementRow {
  name: string;
  ID: string;
  description: string;
  application: string;
  isActive: boolean;
  lastModified: string;
  policies: string[];
  dataProfiles: string[];
}

interface EntitlementProps {
  onNewEntitlement: () => void;
}

interface HistoryEntry {
  status: string;
  title: string;
  modifiedBy: string;
  date: string;
}

interface FeatureAction {
  feature: string;
  actions: string[];
}

// Dummy data
const dummyHistory: HistoryEntry[] = [/*...*/];
const dummyFeatures: FeatureAction[] = [/*...*/];

const EntitlementView: React.FC<EntitlementProps> = ({ onNewEntitlement }) => {
  const [tabRow, setTabRow] = React.useState<EntitlementRow[]>([]);
  const [rowCount, setRowCount] = React.useState(0);
  const [selectedDate, setSelectedDate] = React.useState("");
  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);
  const [drawerData, setDrawerData] = React.useState<EntitlementRow | null>(null);
  const [selectedTab, setSelectedTab] = React.useState(0);
  const [showAllPolicies, setShowAllPolicies] = React.useState(false);

  React.useEffect(() => {
    const fetchEntitlements = async () => {
      try {
        const resp = await axios.get<EntitlementAPI[]>(
          'http://uklvauems02a.uk.standardchartered.com:32441/fmces/v1/allentitlements'
        );
        const rows = resp.data.map(item => ({
          name: item.entitlementName,
          ID: item.entitlementId.toString(),
          description: item.description,
          application: item.application.appName,
          isActive: item.isActive,
          lastModified: new Date(item.lastUpdated).toLocaleDateString(),
          policies: item.entitlementPolicyList.map(p => `POI ${String(p.policy.policyId).padStart(6, '0')}`),
          dataProfiles: item.entitlementProfileList.map(p => `DPR ${String(p.profile.profileId).padStart(6, '0')}`)
        }));
        setTabRow(rows);
        setRowCount(rows.length);
      } catch (error) {
        console.error('Error fetching entitlements', error);
      }
    };
    fetchEntitlements();
  }, []);

  const handleRowClick = (rowData: EntitlementRow) => {
    setDrawerData(rowData);
    setIsDrawerOpen(true);
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setSelectedTab(newValue);
  };

  const headCells = [/*...*/];

  return (
    <div className={styles.container}>
      {/* Header and Filters remain same */}

      <Drawer
        anchor="right"
        open={isDrawerOpen}
        onClose={() => setIsDrawerOpen(false)}
        sx={{ '& .MuiDrawer-paper': { width: 600, backgroundColor: '#1A2028' } }}
      >
        {drawerData && (
          <Box sx={{ p: 2 }}>
            {/* Header Section remains same */}

            <Tabs value={selectedTab} onChange={handleTabChange} sx={/*...*/}>
              <Tab label="Details" />
              <Tab label="Features & Actions" />
              <Tab label="History" />
            </Tabs>

            <Box sx={{ pt: 2, height: 'calc(100vh - 260px)', overflow: 'auto' }}>
              {/* Details Tab */}
              {selectedTab === 0 && (
                <Box>
                  <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2, mb: 2 }}>
                    <Button variant="outlined" startIcon={<DeleteIcon />} sx={/*...*/>Delete</Button>
                    <Button variant="contained" startIcon={<EditIcon />}>Edit</Button>
                  </Box>

                  {/* Description Box */}
                  <Box sx={{ mb: 2, backgroundColor: '#FFFFFF0D', p: 2, borderRadius: 1 }}>
                    <Typography variant="subtitle1" sx={{ color: 'white', mb: 1 }}>
                      Description
                    </Typography>
                    <Typography variant="body2" sx={{ color: 'white' }}>
                      {drawerData.description}
                    </Typography>
                  </Box>

                  {/* Policies & Data Profiles Box */}
                  <Box sx={{ backgroundColor: '#FFFFFF0D', p: 2, borderRadius: 1 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                      <Typography variant="subtitle1" sx={{ color: 'white' }}>
                        Policies & Data Profiles
                      </Typography>
                      <Button 
                        size="small" 
                        onClick={() => setShowAllPolicies(!showAllPolicies)}
                        sx={{ color: '#2BCBC1', textTransform: 'none' }}
                      >
                        {showAllPolicies ? 'Show Less' : 'View All'}
                      </Button>
                    </Box>

                    {/* Policies */}
                    {drawerData.policies
                      .slice(0, showAllPolicies ? undefined : 3)
                      .map((policy, index) => (
                        <Typography key={index} sx={{ color: 'white' }}>- {policy}</Typography>
                      ))}

                    {/* Data Profiles */}
                    {drawerData.dataProfiles
                      .slice(0, showAllPolicies ? undefined : 3)
                      .map((profile, index) => (
                        <Typography key={index} sx={{ color: 'white' }}>- {profile}</Typography>
                      ))}
                  </Box>
                </Box>
              )}

              {/* Features & Actions Tab */}
              {selectedTab === 1 && (
                <Box>
                  {dummyFeatures.map((fa, index) => (
                    <Box key={index} sx={{ mb: 2, backgroundColor: '#FFFFFF0D', p: 2, borderRadius: 1 }}>
                      {/* Feature content */}
                    </Box>
                  ))}
                </Box>
              )}

              {/* History Tab */}
              {selectedTab === 2 && (
                <Box>
                  {dummyHistory.map((entry, index) => (
                    <Box key={index} sx={{ mb: 2, backgroundColor: '#FFFFFF0D', p: 2, borderRadius: 1 }}>
                      {/* History content */}
                    </Box>
                  ))}
                </Box>
              )}
            </Box>
          </Box>
        )}
      </Drawer>
    </div>
  );
};

export default EntitlementView;
