EditEntitlementUser.tsx

import React, { useState, useEffect } from "react";
import {
  Box, Button, Grid, TextField, Typography, IconButton
} from "@mui/material";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import styles from "./CreateEntitlementUser.module.css";

interface EditEntitlementUserProps {
  accountId: string;
  onBack: () => void;
}

export default function EditEntitlementUser({ accountId, onBack }: EditEntitlementUserProps) {
  const [bankId, setBankId] = useState("");
  const [owner, setOwner] = useState("");
  const [roles, setRoles] = useState("");
  const [accountType, setAccountType] = useState("");
  const [status, setStatus] = useState("");

  useEffect(() => {
    // TODO: fetch account data by accountId
    // mock:
    setBankId("111111");
    setOwner("2222222");
    setRoles("Maker");
    setAccountType("User");
    setStatus("Active");
  }, [accountId]);

  const handleSave = () => {
    console.log("Saving", { accountId, bankId, owner, roles, accountType, status });
    // TODO: call update API
  };

  return (
    <Box className={styles.container}>
      <Box className={styles.header}>
        <IconButton onClick={onBack} sx={{ color: "white" }}>
          <ArrowBackIcon />
        </IconButton>
        <Typography variant="h6" sx={{ color: "white", ml: 1 }}>
          Edit Account #{accountId}
        </Typography>
      </Box>
      <Box className={styles.formCard}>
        <Typography className={styles.sectionTitle}>Account Details</Typography>
        <Grid container spacing={2} sx={{ mt: 1 }}>
          {[
            { label: "Bank ID", value: bankId, setter: setBankId },
            { label: "Account Owner", value: owner, setter: setOwner },
            { label: "Role(s)", value: roles, setter: setRoles },
            { label: "Account Type", value: accountType, setter: setAccountType },
            { label: "Status", value: status, setter: setStatus },
          ].map(({ label, value, setter }, i) => (
            <Grid item xs={12} sm={6} key={i}>
              <TextField
                fullWidth
                label={label}
                size="small"
                value={value}
                onChange={e => setter(e.target.value)}
                InputProps={{ sx: { backgroundColor: "#1E252D", color: "white" } }}
                InputLabelProps={{ sx: { color: "#CBCBCB" } }}
              />
            </Grid>
          ))}
        </Grid>
        <Box sx={{ mt: 3, display: "flex", gap: 2, justifyContent: "flex-end" }}>
          <Button variant="outlined" color="inherit" onClick={onBack}>
            Cancel
          </Button>
          <Button variant="contained" onClick={handleSave}>
            Save
          </Button>
        </Box>
      </Box>
    </Box>
  );
}
















interface EntitlementUserViewProps {
  onNavigate?: (tab: string) => void;
  onEditAccount?: (id: string) => void;    // ‚Üê new
}


<Button
  variant="contained"
  startIcon={<EditIcon />}
  onClick={() => {
    if (onEditAccount && drawerData) {
      onEditAccount(String((drawerData as any).id));
    }
  }}
>
  Edit
</Button>





















const [selectedAccountId, setSelectedAccountId] = useState<string | null>(null);








{activeTab === "entitlement-users" && (
  <EntitlementUserView
    onNavigate={setActiveTab}
    onEditAccount={(id: string) => {
      setSelectedAccountId(id);
      setActiveTab("edit-account");
    }}
  />
)}



{activeTab === "edit-account" && selectedAccountId && (
  <EditEntitlementUser
    accountId={selectedAccountId}
    onBack={() => setActiveTab("entitlement-users")}
  />
)}




