import * as React from "react";
import Grid from "@mui/material/Grid";
import IconButton from "@mui/material/IconButton";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import MaterialTable from "../../../Root/components/MaterialTable";
import axios from "axios";
import {
  InputAdornment,
  TextField,
  Typography,
  Tab,
  Tabs,
  Divider
} from "@mui/material";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import Drawer from "@mui/material/Drawer";
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';
import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';
import PersonIcon from '@mui/icons-material/Person';
import AppsIcon from '@mui/icons-material/Apps';
import CircleIcon from '@mui/icons-material/Circle';
import styles from "./EntitlementView.module.css";

interface Application { appName: string; }
interface EntitlementAPI {
  entitlementId: number;
  entitlementName: string;
  description: string;
  application: Application;
  isActive: boolean;
  lastUpdated: string;
  entitlementFeatureActionList: Array<{
    feature: { featureName: string };
    action: { actionName: string }[];
  }>;
  entitlementPolicyList: Array<{
    entitlementPolicyId: number;
    policyName: string;
    policy: { policyName: string };
  }>;
}
interface EntitlementRow {
  name: string;
  ID: string;
  description: string;
  application: string;
  isActive: boolean;
  lastModified: string;
}

interface EntitlementProps { onNewEntitlement: () => void; }

const dummyHistory = [
  {
    type: "Edited",
    icon: <EditIcon sx={{ color: "#4FA9FF" }} fontSize="small"/>,
    title: "Modified Features",
    by: "@Lestrange, Bellatrix (You)",
    dateLabel: "Modified",
    date: "24 Jun 2024"
  },
  {
    type: "Approved",
    icon: <CircleIcon sx={{ color: "#00E676" }} fontSize="small"/>,
    title: "Sales View Only",
    by: "@Malfoy, Lucious",
    dateLabel: "Approved",
    date: "30 May 2024"
  },
  {
    type: "Draft",
    icon: <EditIcon sx={{ color: "#FFD740" }} fontSize="small"/>,
    title: "Sales View Only",
    by: "",
    dateLabel: "Created",
    date: "20 May 2024"
  }
];

const EntitlementView: React.FC<EntitlementProps> = ({ onNewEntitlement }) => {
  const [tabRow, setTabRow] = React.useState<EntitlementRow[]>([]);
  const [rowCount, setRowCount] = React.useState(0);
  const [selectedDate, setSelectedDate] = React.useState("");
  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);
  const [drawerData, setDrawerData] = React.useState<EntitlementAPI | null>(null);
  const [activeTab, setActiveTab] = React.useState(0);

  React.useEffect(() => {
    const fetchEntitlements = async () => {
      try {
        const resp = await axios.get<EntitlementAPI[]>(
          'http://uklvauems02a.uk.standardchartered.com:32441/fmces/v1/allentitlements'
        );
        setTabRow(resp.data.map(item => ({
          name: item.entitlementName,
          ID: item.entitlementId.toString(),
          description: item.description,
          application: item.application.appName,
          isActive: item.isActive,
          lastModified: new Date(item.lastUpdated).toLocaleDateString()
        })));
        setRowCount(resp.data.length);
      } catch (error) {
        console.error('Error fetching entitlements', error);
      }
    };
    fetchEntitlements();
  }, []);

  const handleRowClick = (rowData: EntitlementRow) => {
    // find full API item by ID
    axios.get<EntitlementAPI[]>(
      'http://uklvauems02a.uk.standardchartered.com:32441/fmces/v1/allentitlements'
    ).then(resp => {
      const found = resp.data.find(e => e.entitlementId.toString() === rowData.ID);
      setDrawerData(found || null);
      setIsDrawerOpen(true);
      setActiveTab(0);
    });
  };

  const headCells = [
    { accessorKey: 'name', header: 'Name' },
    { accessorKey: 'ID', header: 'ID', align: 'center' },
    { accessorKey: 'description', header: 'Description' },
    { accessorKey: 'application', header: 'Application' },
    {
      accessorKey: 'isActive', header: 'Status',
      Cell: ({ cell }: any) => {
        const active = cell.getValue();
        return (
          <Box component="span" sx={{
            backgroundColor: active ? '#2BCBC11A' : '#ff00001A',
            borderRadius: '20px',
            color: active ? '#2BCBC1' : '#ff0000',
            p: '0.25rem 0.5rem'
          }}>
            {active ? 'Active' : 'Inactive'}
          </Box>
        );
      }
    }
  ];

  const handleTabChange = (_: any, v: number) => setActiveTab(v);

  return (
    <div className={styles.container}>
      {/* … header + filters + table left untouched … */}
      <Box className={styles.tableSection} sx={{ mt: 2 }}>
        <MaterialTable
          tableRows={tabRow}
          tableCols={headCells}
          totalRowCount={rowCount}
          globalSearch={false}
          onRowClick={handleRowClick}
        />
        <Drawer
          anchor="right"
          open={isDrawerOpen}
          onClose={() => setIsDrawerOpen(false)}
          sx={{ '& .MuiDrawer-paper': { width: 550, backgroundColor: '#1A2028', p: 0 } }}
        >
          {drawerData && (
            <>
              {/* ─────────── HEADER ─────────── */}
              <Box sx={{ display: 'flex', alignItems: 'center', px: 2, py: 1, backgroundColor: '#262B36' }}>
                <IconButton sx={{ color: 'white' }}><ArrowBackIosNewIcon fontSize="small" /></IconButton>
                <AppsIcon sx={{ color: 'white', mr: 1 }} />
                <Typography sx={{ color: 'white', fontWeight: 600, flexGrow: 1 }}>
                  {drawerData.entitlementName} &nbsp;
                  <Typography component="span" sx={{ opacity: 0.7 }}>ENT{drawerData.entitlementId.toString().padStart(3,'0')}</Typography>
                </Typography>
                <IconButton sx={{ color: 'white' }}><ArrowForwardIosIcon fontSize="small" /></IconButton>
                <IconButton onClick={() => setIsDrawerOpen(false)} sx={{ color: 'white' }}>
                  <Typography variant="button">×</Typography>
                </IconButton>
              </Box>

              {/* ───────── TAGS ROW ───────── */}
              <Box sx={{ px: 2, py: 1, display: 'flex', gap: 1 }}>
                <Box className={styles.tag}><PersonIcon fontSize="small" /> &nbsp;
                  <Typography component="span" sx={{ color: 'white', fontSize: 12 }}>
                    Dumbledore.Albus@sc.uk
                  </Typography>
                </Box>
                <Box className={styles.tag}><AppsIcon fontSize="small" /> &nbsp;
                  <Typography component="span" sx={{ color: 'white', fontSize: 12 }}>
                    {drawerData.application.appName}
                  </Typography>
                </Box>
                <Box className={styles.tagActive}>
                  <Typography sx={{ fontSize: 12 }}>Active</Typography>
                </Box>
              </Box>

              <Divider sx={{ borderColor: '#444' }} />

              {/* ───────── TABS ───────── */}
              <Tabs value={activeTab} onChange={handleTabChange}
                textColor="inherit" indicatorColor="primary" sx={{ px:2 }}>
                <Tab label="Details" />
                <Tab label="Features & Actions" />
                <Tab label="History" />
              </Tabs>
              <Divider sx={{ borderColor: '#444' }} />

              {/* ───────── DETAILS PANEL ───────── */}
              {activeTab === 0 && (
                <Box sx={{ px:2, py:2 }}>
                  <Box sx={{ display:'flex', justifyContent:'space-between', alignItems:'center' }}>
                    <Typography sx={{ color:'white', fontWeight:500 }}>Description</Typography>
                    <Button size="small" variant="text" sx={{ color:'#4FA9FF', textTransform:'none' }}>
                      View
                    </Button>
                  </Box>
                  <Box sx={{
                    backgroundColor: '#FFFFFF0D',
                    p:2,
                    borderRadius:1,
                    mt:1,
                    color:'white'
                  }}>
                    {drawerData.description}
                  </Box>

                  <Box sx={{ display:'flex', justifyContent:'space-between', alignItems:'center', mt:3 }}>
                    <Typography sx={{ color:'white', fontWeight:500 }}>
                      Policies & Data Profiles
                    </Typography>
                    <Button size="small" variant="text" sx={{ color:'#4FA9FF', textTransform:'none' }}>
                      View All
                    </Button>
                  </Box>
                  <Box sx={{ mt:1, display:'flex', flexDirection:'column', gap:1 }}>
                    {drawerData.entitlementPolicyList.map((p, i) => (
                      <Box key={i}
                        sx={{
                          border: '1px solid #4FA9FF',
                          borderRadius:1,
                          px:2,
                          py:1,
                          display:'flex',
                          justifyContent:'space-between',
                          color:'white',
                          fontSize: 14
                        }}>
                        <Typography>POL {p.entitlementPolicyId.toString().padStart(6,'0')}</Typography>
                        <Typography>{p.policy.policyName}</Typography>
                      </Box>
                    ))}
                  </Box>
                </Box>
              )}

              {/* ───────── FEATURES & ACTIONS PANEL ───────── */}
              {activeTab === 1 && (
                <Box sx={{ px:2, py:2 }}>
                  <Grid container>
                    <Grid item xs={6}>
                      <Typography sx={{ color:'white', fontWeight:500 }}>Feature</Typography>
                    </Grid>
                    <Grid item xs={6}>
                      <Typography sx={{ color:'white', fontWeight:500 }}>Actions</Typography>
                    </Grid>
                  </Grid>
                  <Divider sx={{ borderColor: '#444', my:1 }} />
                  {drawerData.entitlementFeatureActionList.map((fa,i) => (
                    <Grid container key={i} sx={{ py:1 }}>
                      <Grid item xs={6}>
                        <Typography sx={{ color:'white' }}>{fa.feature.featureName}</Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography sx={{ color:'white' }}>
                          {fa.action.map(a => a.actionName).join(', ')}
                        </Typography>
                      </Grid>
                      {i < drawerData.entitlementFeatureActionList.length - 1 && (
                        <Divider sx={{ borderColor: '#444', width: '100%', mt:1 }} />
                      )}
                    </Grid>
                  ))}
                </Box>
              )}

              {/* ───────── HISTORY PANEL ───────── */}
              {activeTab === 2 && (
                <Box sx={{ px:2, py:2, display:'flex', flexDirection:'column', gap:2 }}>
                  {dummyHistory.map((h,i) => (
                    <Box key={i} sx={{ display:'flex', alignItems:'center', gap:1 }}>
                      {h.icon}
                      <Box>
                        <Typography sx={{ color:'white', fontWeight:500 }}>{h.type}</Typography>
                        <Typography sx={{ color:'#4FA9FF', fontSize:14, textDecoration:'underline', cursor:'pointer' }}>
                          {h.title}
                        </Typography>
                        <Typography sx={{ color:'white', fontSize:12 }}>
                          {h.by && `${h.by} • `}
                          {h.dateLabel}: {h.date}
                        </Typography>
                      </Box>
                    </Box>
                  ))}
                </Box>
              )}
            </>
          )}
        </Drawer>
      </Box>
    </div>
  );
};

export default EntitlementView;
