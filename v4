import * as React from "react";
import Grid from "@mui/material/Grid";
import IconButton from "@mui/material/IconButton";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import MaterialTable from "../../../Root/components/MaterialTable";
import axios from "axios";
import {
  InputAdornment,
  TextField,
  Typography
} from "@mui/material";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import Drawer from "@mui/material/Drawer";
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import styles from "./EntitlementView.module.css";

// API interfaces
interface Application {
  appName: string;
}

interface EntitlementProfile {
  profile: { profileName: string };
}

interface EntitlementPolicy {
  policy: { policyName: string };
}

interface EntitlementAPI {
  entitlementId: number;
  entitlementName: string;
  description: string;
  application: Application;
  isActive: boolean;
  lastUpdated: string;
  entitlementProfileList: EntitlementProfile[];
  entitlementPolicyList: EntitlementPolicy[];
}

interface EntitlementRow {
  name: string;
  ID: string;
  description: string;
  application: string;
  isActive: boolean;
  lastModified: string;
  profiles: string;
  policies: string;
}

interface EntitlementProps {
  onNewEntitlement: () => void;
}

const EntitlementView: React.FC<EntitlementProps> = ({ onNewEntitlement }) => {
  const [tabRow, setTabRow] = React.useState<EntitlementRow[]>([]);
  const [rowCount, setRowCount] = React.useState(0);
  const [selectedDate, setSelectedDate] = React.useState("");
  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);
  const [drawerData, setDrawerData] = React.useState<EntitlementRow | null>(null);

  React.useEffect(() => {
    const fetchEntitlements = async () => {
      try {
        const resp = await axios.get<EntitlementAPI[]>(
          'http://uklvauems02a.uk.standardchartered.com:32441/fmces/v1/allentitlements'
        );
        const rows = resp.data.map(item => {
          const profiles = item.entitlementProfileList
            .map(p => p.profile.profileName)
            .join(', ');
          const policies = item.entitlementPolicyList
            .map(p => p.policy.policyName)
            .join(', ');

          return {
            name: item.entitlementName,
            ID: item.entitlementId.toString(),
            description: item.description,
            application: item.application.appName,
            isActive: item.isActive,
            lastModified: new Date(item.lastUpdated).toLocaleDateString(),
            profiles,
            policies,
          };
        });
        setTabRow(rows);
        setRowCount(rows.length);
      } catch (error) {
        console.error('Error fetching entitlements', error);
      }
    };

    fetchEntitlements();
  }, []);

  const handleRowClick = (rowData: EntitlementRow) => {
    setDrawerData(rowData);
    setIsDrawerOpen(true);
  };

  const headCells = [
    { accessorKey: 'name', header: 'Name' },
    { accessorKey: 'ID', header: 'ID', align: 'center' },
    { accessorKey: 'description', header: 'Description' },
    { accessorKey: 'application', header: 'Application' },
    { accessorKey: 'profiles', header: 'Profiles' },
    { accessorKey: 'policies', header: 'Policies' },
    {
      accessorKey: 'isActive', header: 'Status',
      Cell: ({ cell }: any) => {
        const active = cell.getValue();
        return (
          <Box component="span" sx={{
            backgroundColor: active ? '#2BCBC11A' : '#ff00001A',
            borderRadius: '20px',
            color: active ? '#2BCBC1' : '#ff0000',
            p: '0.25rem 0.5rem'
          }}>
            {active ? 'Active' : 'Inactive'}
          </Box>
        );
      }
    }
  ];

  return (
    <div className={styles.container}>
      {/* Header */}
      <div className={styles.header}>
        <Grid container alignItems="center" justifyContent="space-between">
          <Typography sx={{ fontWeight: 500, fontSize: 20 }}>Entitlement Management</Typography>
          <Button
            variant="contained"
            startIcon={<AddCircleIcon />}
            sx={{ height: 41, fontWeight: 600, fontSize: 12 }}
            onClick={onNewEntitlement}
          >Add New</Button>
        </Grid>
      </div>

      {/* Filters */}
      <div className={styles.filterSection}>
        <Grid container alignItems="center" spacing={2}>
          <Grid item xs={2}>
            <TextField
              placeholder="Type here"
              size="small"
              fullWidth
              InputProps={{ sx: { color: 'white' } }}
              sx={{ backgroundColor: '#1E252D', borderRadius: 1, height: 36 }}
            />
          </Grid>
          <Grid item xs={3}>
            <TextField
              label="Start Date â†’ End Date"
              size="small"
              fullWidth
              value={selectedDate}
              onChange={e => setSelectedDate(e.target.value)}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton onClick={() => alert('Pick dates')}>
                      <CalendarTodayIcon sx={{ color: '#FFF' }} />
                    </IconButton>
                  </InputAdornment>
                ),
                sx: { color: 'white' }
              }}
              sx={{ backgroundColor: '#1E252D', borderRadius: 1, height: 36 }}
            />
          </Grid>
          <Grid item xs={2}>
            <Button
              variant="contained"
              size="small"
              sx={{ backgroundColor: '#2C3F5E', color: 'white', width: 100, height: 36 }}
            >Search</Button>
          </Grid>
        </Grid>
      </div>

      {/* Table & Drawer */}
      <div className={styles.tableSection}>
        <Box sx={{ border: '1px solid #444', p: 2, borderRadius: 1, mt: 2, backgroundColor: '#1A2028' }}>
          <MaterialTable
            tableRows={tabRow}
            tableCols={headCells}
            totalRowCount={rowCount}
            globalSearch={false}
            onRowClick={handleRowClick}
          />

          <Drawer
            anchor="right"
            open={isDrawerOpen}
            onClose={() => setIsDrawerOpen(false)}
            sx={{ '& .MuiDrawer-paper': { width: 500, backgroundColor: '#1A2028', p: 2 } }}
          >
            {drawerData ? (
              <>
                <Box sx={{ backgroundColor: '#262B36', p: 2, borderRadius: 1 }}>
                  <Typography variant="h6" sx={{ color: 'white' }}>{drawerData.name}</Typography>
                  <Grid container spacing={1} sx={{ mt: 2 }}>
                    <Grid item xs={6} sx={{ backgroundColor: '#FFFFFF0D', p: 1 }}>ID: {drawerData.ID}</Grid>
                    <Grid item xs={6} sx={{ backgroundColor: '#FFFFFF0D', p: 1 }}>
                      <Box component="span" sx={{
                        backgroundColor: drawerData.isActive ? '#2BCBC11A' : '#ff00001A',
                        borderRadius: '20px',
                        color: drawerData.isActive ? '#2BCBC1' : '#ff0000',
                        p: '0.25rem 0.5rem'
                      }}>
                        {drawerData.isActive ? 'Active' : 'Inactive'}
                      </Box>
                    </Grid>
                  </Grid>
                </Box>

                <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
                  <Button variant="outlined" startIcon={<DeleteIcon />} sx={{ color: 'white', borderColor: 'white' }}>Delete</Button>
                  <Button variant="contained" startIcon={<EditIcon />}>Edit</Button>
                </Box>

                <Box sx={{ mt: 2 }}>
                  <Typography variant="body1" sx={{ color: 'white' }}>Description</Typography>
                  <Box sx={{ backgroundColor: '#FFFFFF0D', p: 2, borderRadius: 1, color: 'white' }}>
                    {drawerData.description}
                  </Box>
                </Box>

                <Box sx={{ mt: 2 }}>
                  <Typography variant="body1" sx={{ color: 'white' }}>Profiles</Typography>
                  <Box sx={{ backgroundColor: '#FFFFFF0D', p: 2, borderRadius: 1, color: 'white' }}>
                    {drawerData.profiles || 'None'}
                  </Box>
                </Box>

                <Box sx={{ mt: 2 }}>
                  <Typography variant="body1" sx={{ color: 'white' }}>Policies</Typography>
                  <Box sx={{ backgroundColor: '#FFFFFF0D', p: 2, borderRadius: 1, color: 'white' }}>
                    {drawerData.policies || 'None'}
                  </Box>
                </Box>

                <Box sx={{ mt: 2 }}>
                  <Typography variant="body2" sx={{ color: 'white' }}>Last Modified: {drawerData.lastModified}</Typography>
                </Box>
              </>
            ) : (
              <Typography sx={{ color: 'white' }}>No Record</Typography>
            )}
          </Drawer>
        </Box>
      </div>
    </div>
  );
};

export default EntitlementView;
